#+TITLE:     OS Development Notes and Links
#+AUTHOR:    Fogus
#+EMAIL:     me@fogus.me
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:2 \n:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil

* OSDev notes and links

At [[http://blog.fogus.me/2004/01/16/132/][one point]] I was crazy about creating and studying alternative operating systems.  While I still find OSDev fascinating, I have moved onto other interests.  This page contains links and notes from my previous studies.  I also have a notebook filled with notes that I probably might maybe scan or type up one day.  As a point of background, my first programming job was to convert an existing RTOS system for a custom digital board from Cosmac 1802 assembly to C and 6809 assembly.  It was extremely difficult for me, but I found that I loved every moment of it.  That project was of course much simpler than a general-purpose OS targeting the x86, but it stoked the embers of interest in me, and I have been fascinated with OSDev ever since.

** Interesting alternative and hobby OSes

I've studied most of these deeply and found them incredibly instructional.

- [[http://www.gnu.org/software/hurd/microkernel/mach/gnumach.html][GNU Mach]]
- [[http://monaos.org/][Mona OS]] - The OS I would create if I had the skill.
- [[http://www.o3one.org/][O3one]] - Crazy beautiful
- [[http://www.sparrowos.com/][Losethos/SparrowOS/TempleOS]] - Losethos/Sparrow's creator has a very clear [vision](http://www.sparrowos.com/Wb/Doc/Constitution.html#l1) for his OS and he's executed that plan perfectly.
- [[http://www.retroprogramming.com/2011/03/itsy-os-simple-preemptive-switcher.html][Itsy-OS: A simple 380 byte OS kernel]] - True ultimate ASM power.
- [[http://wiki.xomb.org/index.php?title=XOmB_Bare_Bones][The XOmB Bare Bones distribution is a minimal 64 bit OS written in D]] - Developing a kernel in an alternative language is a personal fetish.
- [[http://losak.sourceforge.net/][LOSAK: Lisp Operating System, Abstraction Kernel]] - Defunct but fun nonetheless.
- [[http://pdos.csail.mit.edu/exo.html][MIT Exokernel]]
- [[http://newos.org/][NewOS]] - Seems to be abandoned, but the code is some of the cleanest that you will ever read.
- [[http://www.swd.de/documents/manuals/neutrino/index_en.html][QNX Neutrino]] - At one point you could see the code to this.  It was mind-busting.
- [[http://www.sics.se/contiki/][Contiki]] - Just plain fun.
- [[http://wiki.osdev.org/Projects][The grand unified list of hobby and educational operating systems]]

** Interesting OSDev resources

- [[http://replay.waybackmachine.org/20050212051329/http://my.execpc.com/~geezer/johnfine/index.htm][John Fine's original site]]
- [[http://www.vijaymukhi.com/vmis/roll.htm][Ethernet development]]
- [[http://directory.google.com/Top/Computers/Software/Operating_Systems/][Google's OS directory]]
- [[http://replay.waybackmachine.org/20060524034819/http://www.cs.wvu.edu/~jdm/classes/cs356/notes/mutex/][Mutexes and critical section]]
- [[http://wiki.osdev.org/Creating_a_64-bit_kernel][Creating a 64-bit OS]]

** Protected Mode

- [[http://members.tripod.com/protected_mode/alexfru/pmtuts.html][Tutorials in C and ASM by Alexei Frounze]] [fn:frounze]
- [[http://genapro.chat.ru/examples.html][PMode tutorials]]

[fn:frounze] Alexei Frounze is a hobby OSDev luminary.  It's well-worth studying his code if you're interested in creating your own OS.

** Binary formats

- [[http://alexfru.chat.ru/epm.html#coffutils][COFF by Alexei Frounze]]
- [[http://wiki.osdev.org/ELF][ELF]]

Bootloaders
-----------

- [Basics of bootloaders](http://wiki.osdev.org/Rolling_Your_Own_Bootloader)
- [Network booting](http://osdev.berlios.de/netboot.html)
- [El Torito](http://wiki.osdev.org/El-Torito) (CD-ROM bootsectors)

** VMs

- [[http://wiki.qemu.org/Main_Page][QEMU]]
- [[http://bochs.sourceforge.net/][Bochs]]

** Libraries

- [[http://www.cs.utah.edu/flux/oskit/][OSKit]] - Although I've never used it, the abstractions it provides are worth studying.
- [[http://scanlime.org/2008/03/introducing-metalkit/][Metakit]] - a simple library for writing programs that run on IA32 (x86) machines on the bare metal

** OSDev sites

- [[http://www.osnews.com/][OSnews]] 
- [[http://reddit.com/r/osdev][r/osdev]] - a subreddit moderated by me
- [[http://wiki.osdev.org/Main_Page][OSDev.org]] - teaching people how to clone UNIX since 2000
- [[http://www.nondot.org/sabre/os/articles/][Operating System resource center]]
- [[http://www.osdever.net/tutorials/index][Bonafide OS Dever]]
- [[http://groups.google.com/group/alt.os.development/topics][alt.os.development]]
  
** Compilers, assemblers, and languages

These are not always current, but much can be learned from them all.

- [[http://www.nasm.us/][NASM]]
- [[http://bellard.org/tcc/][TCC]]
- [[http://www.debath.co.uk/)][BCC]]
- [[http://edn.embarcadero.com/article/20803][Turbo Pascal v5.5]]
- [[http://edn.embarcadero.com/museum/][Borland compiler museum]]
- [[http://www.devq.net/pascal/][The Pascal programmers' page]]
- [[http://snippets.snippets.org/index.php][C/C++ Snippets]]

** Books on and useful for OSDev

/note: some of the links below are amazon affiliate links.  please consider buying through the link if you find this site useful, otherwise you can remove the part of the url with fogus-20 to visit amazon instead/

Interestingly, there are not /that/ many books on developing your own operating systems.[fn:leanpub]  I've read most of those that deal with the topic directly, and some of those that touch on it only tangentially.  Below are the books that I found particularly useful, relevant, and/or interesting:

[fn:leanpub] [[http://www.leanpub.com][Leanpub]] seems like the perfect place for underground OSDev book publishing.

*** Foundational

- [[http://www.amazon.com/exec/obidos/ASIN/0130313580/fogus-20/][Modern Operating Systems]] by Tannenbaum
- [[http://www.letterp.com/~dbg/][Practical File System Design]] by Giampaolo

*** OSDev books

- [[http://www.amazon.com/o/asin/0136375391?tag=fogus-20][OS Design: the XINU Approach]] by Comer
- [[http://www.amazon.com/o/asin/1588530000?tag=fogus-20][MMURTL]] by Burgess
- [[http://www.amazon.com/Developing-32-Bit-Operating-System-Cd-Rom/dp/0672306557?tag=fogus-20][Developing Your Own 32-Bit Operating System]]by Burgess
- [[http://www.amazon.com/exec/obidos/ASIN/0201544288/fogus-20/][Project Oberon - The Design of an Operating System and Compiler]] by Wirth

*** To-read

- [[http://www.amazon.com/o/asin/020155447X?tag=fogus-20][Protected Mode Software Architecture]] by Shanley
- [[http://www.amazon.com/o/asin/020162687X?tag=fogus-20][Dissecting DOS]] by Podanoffsky
- [[http://www.amazon.com/o/asin/0470025247?tag=fogus-20][The Symbian OS Internals]] by Jane Sales
- [[http://www.amazon.com/o/asin/0750664711?tag=fogus-20][Real-Time Systems Development]] by Williams
- [[http://www.amazon.com/OpenVMS-Operating-Concepts-Edition-Technologies/dp/1555581579?tag=fogus-20][Open VMS Operating System Concepts]] by David Miller
- [[http://www.amazon.com/TinyOS-Programming-Philip-Levis/dp/0521896061/ref=sr_1_1?tag=fogus-20][TinyOS Programming]] by Levis and Gay

** Case studies

- [[http://www.bell-labs.com/history/unix/][The Creation of the UNIX Operating System]]
- [[http://www.patersontech.com/Dos/Byte/InsideDos.htm][An inside look at MS-DOS]]
- [[http://www.amazon.com/o/asin/0201183935?tag=fogus-20][Inside the JavaOS Operating System]]
- [[http://www.pagetable.com/c64rom/][Fully Commented Commodore 64 ROM Disassembly]]
- [[http://www.amazon.com/o/asin/0131482092?tag=fogus-20][Solaris Internals]] by McDougal
- [[http://www.amazon.com/o/asin/1573980137?tag=fogus-20][Lions' Commentary on UNIX]] by John Lions
- [[http://www.amazon.com/o/asin/0132017997?tag=fogus-20][The Design of the UNIX Operating System]] by Bach
- [[http://www.amazon.com/o/asin/0764545698?tag=fogus-20][Undocumented Windows NT]]by Dabak and Phadke
- [[http://www.amazon.com/o/asin/0471164836?tag=fogus-20][UNIX Filesystems: Evolution, Design, and Implementation]] by Pate
- [[http://www.amazon.com/o/asin/1572316772?tag=fogus-20][Inside Windows NT]] by Custer


* FogOS

I started down the path of writing an OS, aptly named FogOS written in C++.  Below are some of the notes that I created (well, those I've been able to find).

Memory map ideas
----------------

<pre>
Address       Size            Description
---------     ---------       ---------------------------------
0000 0000     1 KB            Real-mode interrupt vector table
0000 0400     256 bytes       ROM-BIOS data
0000 0500     62.75 KB
0001 0000     256 KB          miscellaneous data
0005 0000     64 KB           Kernel stack at startup
0006 0000     512 bytes       Kernel IDT
0006 0200     64 KB           Kernel TSS's
0007 0200     512 bytes       GDT
0007 0400     63 KB
0008 0000     64 KB           Kernel read-only data
0009 0000     64 KB           Kernel heap
000a 0000     128 KB          Video memory
000c 0000     64 KB           Kernel ES
000d 0000     128 KB
000f 0000     64 KB           ROM-BIOS
--  1MB --
0010 0000     64 KB           Kernel code

0010 FFF0     Max end of kernel (65,520 bytes)

0050 0000     4 MB            Stack of physical memory pages
008F F000     4 KB            Page table staging area
0090 0000     4 KB            Kernel page directory
0090 1000     ???             Kernel page tables
???? ????
00f0 0000     1 MB            Low DMA area
-- 16MB --
0100 0000     Unlimited       Available to applications
</pre>

I've left some BIOS stuff as I found it.

My boot loader loads my kernel at 1MB physical. Given the 16-bit real-mode
nature of the boot code, it can't load anything beyond 1MB+65,520, so for
the time being my kernel is limited to 65,520 bytes in size. Currently
it's at 36,864 bytes. I know that one day, in the not-too-distant future,
I'll have to do something about this. Maybe load it lower and then let it
move itself? Or break the kernel up into two files: a small one that the
boot loader loads, and that then loads the full kernel. I don't know.

Some of these areas that I've reserved might not make sense. I pretty much
drew up this map before I know what I was doing (ha! I still don't!) and
so I made room for things like TSS's (plural) but I really won't know what
I'll need there until I get to processes and task switching.

I don't do any relocations. My kernel is linked to load at 1MB and the
boot loader loads it directly there. Every time someone talks about
relocations I wonder what I'm missing. Looking forward to finding out :-)

Architecture
------------

My ideas for a microkernel.  Looking back on FogOS I realize that the kernel was less interesting than the HAL.  I spent a lot of time thinking about the HAL and it's base abstractions.  I actually went down the path of implementing it based on the following image:

![FogOS Overview](http://images.fogus.me/blog/fogos_overview.png "FogOS Overview")

You'll notice that I have a crypto service all the way down in the kernel.  My thinking at the time was that I could gather interesting entropy at the kernel level.  I recall reading some papers about this, but their titles have long since faded.  Anyway, I added at least one hook for the entropy gathering and planned for more.

Booting
-------

Some bits of the implementation of the image above eventually booted!

![Boots](http://images.fogus.me/blog/fogos_001_boot.png "FogOS eventually booted")

And then after adding the HAL, it was still able to boot!

![HAL Boots](http://images.fogus.me/blog/fogos_002_boot.png "FogOS with HAL booted")

... and that is where I left it.[^left]

One day I shall return.


Footnotes
=========

[^left]: And this is where 99% of hobby OS practitioners leave it.  :-(
