--- 
title: Perlis Languages
inMenu: true
filemdate: 2013.09.23
--- 

*this is the first entry in a series on [programmer enrichment](http://blog.fogus.me/tag/enrichment)*

<img src="http://farm8.staticflickr.com/7328/9897983526_e0bcb2bf1d_o.jpg" alt="" title="alan_perlis" width="243" height="300" style="display: block; margin-left: auto; margin-right: auto" />

> A language that doesn't affect the way you think about programming is not worth knowing.
> -- Alan Perlis

*inspired by a [LtU thread](http://lambda-the-ultimate.org/node/3464) and the great post [Programming Achievements: How to Level Up as a Developer](http://jasonrudolph.com/blog/2011/08/09/programming-achievements-how-to-level-up-as-a-developer/) by Jason Rudolph[^my-list]. most code samples from [Rosetta Code](http://rosettacode.org/wiki/Main_Page).*

The philosopher Friedrich Nietzsche believed that all interactions and interpretations of the external world occurred through the lens of individual perspective.  Therefore, truth to Nietzsche was subject to interpretation.  Programmers are especially prone to subjective views on their industry best-practices and valuations, often colored by their chosen[^chosen] programming languages.[^not-just]  However, Nietzsche believed that in order to achieve a high-level of thinking, one should grant all perspectives equal opportunity and let them stand, or fall, on their own merits.  You've probably experienced this approach yourself in college if a professor demanded the classic assignment whereby students write an essay taking the side of an argument that they themselves denounce.  This type of exercise is potentially very powerful in that it often works to crystalize one's own beliefs and occasionally helps to shake those beliefs to the core.

A Perlis Language is a programming language that I believe will shake one's views on software development to the core.

Below I will enumerate[^npo] some of my Perlis Languages and give an all-too-brief overview and just a sip of code for each.

## Joy

[Joy](http://www.kevinalbrecht.com/code/joy-mirror/joy.html) is an example of a [concatenative programming language](http://c2.com/cgi/wiki?ConcatenativeLanguage) or more simply put, a stack-based language.  That is, functions are never explicitly passed arguments, but instead take an implicit stack that is maintained by the programmer.  This may seem totally insane, a sentiment not wholly inaccurate, but the levels of succinctness and elegance achieved via this model is stunning.  The complexity in maintaining a stack is typically handled by concatenative programmers through the process of vigorous factoring of words (think functions) into smaller words.  There is a whole class of purely stack-manipulation primitives that signal the need for factoring when their use becomes too pervasive.  The goal is to constantly drive the code toward an expression of the domain rather than an expression of the programming language-specific expression of the domain.  There are certainly better and more historically significant concatenative languages, but Joy strikes a nice chord with me -- your mileage may vary.

    (* Quicksort in Joy *)
    
    DEFINE qsort ==
       [small]
       []
       [uncons [>] split]
       [swapd cons concat]
       binrec .

#### More information

* [Daniel Spiewak wrote a great trilogy about concatenative languages](http://www.codecommit.com/blog/category/cat); his treatment is far better than I could ever produce.

* [A Joy tutorial](http://www.kevinalbrecht.com/code/joy-mirror/j01tut.html)

* The [Concatenative Wiki](http://concatenative.org/wiki/view/Front%20Page)

*possible substitutes: [Factor](http://factorcode.org/), [Forth](http://www.ultratechnology.com/4th_1970.html), [Cat](http://www.cat-language.com/), [PostScript](http://www.tailrecursive.org/postscript/postscript.html)*

## Eiffel

Eiffel is an extremely opinionated object-oriented programming language.  Like myself, many programmers today have a majority-share of "real-world" experience in one OO language or another.  However, you haven't used anything like Eiffel.  That is, the bulk of Eiffel will be recognizable to most programmers, but the enlightening feature for most is the first-class support for [Design by Contract](http://en.wikipedia.org/wiki/Design_by_contract).  In a nutshell, DbC (or contracts programming) is an approach that allows one to specify the expectations on method results based on their required input parameters and also to define class-level invariants.[^inv]  This may seem fairly simplistic, but it's in this simplicity that forms the basis for an extremely powerful design paradigm.  In fact, contract support libraries and extensions have been created for other languages: [Ruby](http://blog.brianguthrie.com/2007/03/20/lets-make-a-deal-handshake-a-contract-system-for-ruby/), [Clojure](http://fogus.me/fun/trammel), [C++](http://en.wikipedia.org/wiki/GNU_Nana), [Java](https://code.google.com/p/cofoja/), and [Groovy](http://github.com/andresteingress/gcontracts) to name only a few.

    -- Dictionary class fragment
    
    class DICTIONARY [ELEMENT]
    feature
    	put (x: ELEMENT; key: STRING) is
    			-- Insert x so that it will be retrievable
    			-- through key.
    		require
    			count <= capacity
    			not key.empty 
    		ensure
    			has (x)
    			item (key) = x
    			count = old count + 1
    		end
    invariant
    	0 <= count
    	count <= capacity
    end

#### More information

* [An introduction to DbC](http://www.eiffel.com/developers/design_by_contract.html)
* [Using code contracts for safer code](http://buksbaum.us/2011/04/20/using-code-contracts-for-safer-code/)
* [DbC and Unit Testing](http://onestepback.org/index.cgi/Tech/Programming/DbcAndTesting.html) by Jim Weirich

*possible substitutes: [D](http://www.digitalmars.com/d/2.0/index.html), [Cobra](http://cobra-language.com/)*

## Qi

[Qi](http://www.lambdassociates.org/Book/page000.htm) is a Lisp -- big deal right?  Wrong.  Qi is a Lisp with skinnable types, a built-in logic engine, rewrite rules, back-tracking dispatch, built-in lexer and parser generators, and pattern matching that compiles down to [highly-performant Common Lisp](http://www.lambdassociates.org/studies/study10.htm).  The author [Dr. Mark Tarver](http://www.lambdassociates.org/) has strong opinions on the state of the software development in general and Lisp in particular (you may already have read *[The Bipolar Lisp Programmer](http://www.lambdassociates.org/blog/bipolar.htm)*) and these opinions shine in the implementation of Qi.  The successor to Qi, Shen, is in active development with a release scheduled some time this summer.

    \ A simple expression calculator \
    
    (datatype arith-expr
    
        X : number;
        ====================
        [num X] : arith-expr; 
    
        if (element? Op [+ - * /])
        X : arith-expr; Y : arith-expr;
        ===============================
        [X Op Y] : arith-expr;)
    
     (define do-calculation
      {arith-expr --> number}
      [X + Y] -> (+ (do-calculation X) (do-calculation Y))
      [X - Y] -> (- (do-calculation X) (do-calculation Y))
      [X * Y] -> (* (do-calculation X) (do-calculation Y))
      [X / Y] -> (/ (do-calculation X) (do-calculation Y))
      [num X] -> X)

#### More information

* [Qi language group](http://groups.google.com/group/Qilang)
* [Purely Functional Red/Black Trees in Qi](http://jng.imagine27.com/articles/2011-06-28-141124_purely_functional_types_red_black_trees_in_qi.html) by Justin Grant


*possible substitutes: [Pure](http://code.google.com/p/pure-lang/)*

## Clojure

Clojure is a fantastic language, but [let's just say that I have some skin in this game](http://joyofclojure.com).  Take this entry with a grain of salt.  So instead...

## Kernel

[Kernel](http://web.cs.wpi.edu/~jshutt/kernel.html) is also a Lisp, but it differs in that it completely eliminates the line separating compile-time and runtime via [fexprs](http://fexpr.blogspot.com/2011/04/fexpr.html).  In short, fexprs are functions that do not evaluate their arguments until explicitly called on to do so.  Kernel achieves this seemingly impossible behavior by treating environments as first class objects that serve as the evaluation context.  This handling of environments also helps to make Kernel evaluation hygienic since the evaluation context of any symbol or combination is fully controlled.  Needless to say this is voodoo of the highest order, but the rules of the language are simple and consistent and it'll blow your mind to see how its underpinnings start at a deeper and more abstract position than even [McCarthy's original](http://github.com/fogus/lithp).

    ;; The implementation of apply in Kernel
    ;; This is typically a Lisp primitive
    
    ($define! apply
       ($lambda (appv args)
          (eval (cons (unwrap appv) args)
                (make-environment))))

#### More information
*via [Manuel Simoni](http://axisofeval.blogspot.com/) and [Patrick Logan](http://patricklogan.blogspot.com/)*

* [Fexprs in newLISP](http://kazimirmajorinc.blogspot.com/2010/10/on-pitmans-special-forms-in-lisp.html) by Kazimir Majorinc
* [Thomas Lord on Fexprs](http://lambda-the-ultimate.org/node/4093#comment-62065)
* [Expansion-passing Style: A General Macro Mechanism](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.4332) by R. Kent Dybvig,  Daniel P. Friedman, and Christopher T. Haynes

*possible substitutes: [newLISP](http://www.newlisp.org/)*

## Mozart/Oz

[Oz](http://www.mozart-oz.org/) is truly a "my language has more paradigms than yours" kind of language.[^scaladigms]  Oz (like many hyper-multi-paradigm languages) is unfortunately <img src="http://farm4.staticflickr.com/3723/9898582296_a0a2a91421_o.jpg" title="vanroy" width="125" height="156" style="float:right;" /> relegated to the "educational language" category, but regardless its influence pervades a lot of the thinking in distributed and dataflow computation ([Akka](http://akka.io/) for instance is deeply influenced by Oz).  As an added bonus, the canonical book on Oz, *[Concepts, Techniques, and Models of Computer Programming](http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/ref=sr_1_1?s=books&ie=UTF8&tag=fogus-20&qid=1313152820&sr=1-1)* is in my top ten must read list for developers.  It's apt that a mind-bending language should couple with a likewise mind-bending book.

    %% Towers of Hanoi in Oz
    
    declare
      proc {TowersOfHanoi N From To Via}
         if N > 0 then
            {TowersOfHanoi N-1 From Via To}
            {System.showInfo "Move from "#From#" to "#To}
            {TowersOfHanoi N-1 Via To From}
         end
      end
    in
      {TowersOfHanoi 4 left middle right}

#### More information

* [Oz tutorial](http://www.mozart-oz.org/documentation/tutorial/index.html)

*possible substitutes: [Erlang](http://www.erlang.org/), [Prolog](http://cs.union.edu/~striegnk/learn-prolog-now/lpnpage.php?pageid=online), [Mercury](http://www.mercury.csse.unimelb.edu.au/index.html), [Alice](http://www.ps.uni-saarland.de/alice/)*

## RCA COSMAC 1802 Assembly

RCA's 8-bit [Cosmac](http://en.wikipedia.org/wiki/RCA_1802) processor was shot into space as a main component[^cosmuck] of the [Galileo spacecraft](http://en.wikipedia.org/wiki/Galileo_spacecraft), but it's novelty lies in its bizarro architecture.  For example, while the processor did not support a `CALL` instruction, it did support subroutines through the fact that any of its 16 16-bit registers could serve as the program-counter.  Likewise the 1802 did not have a stack, but clever register usage was often the cure for this "deficiency".  In addition it had a very simple I/O port that hackers used to maximum effect.  While not the fastest CPU ever made (nor even in its time), the stark simplicity of the processor and its assembly code will make for a mind-bending experience.  Coupled with a visual emulator (see link below), it's fun to see the consequences of each instruction.

    ... stack push
    GHI R3
    STXD
    GLO R3
    STXD
    
    ... stack pop
    IRX
    LDXA
    PLO R3
    LDX
    PHI R3

#### More information

* [A Short Course on (1802) Programming](http://www.ittybittycomputers.com/IttyBitty/ShortCor.htm)
* The [COSMAC ELF](http://www.cosmacelf.com/)
* A [Tiny ELF emulator](http://www.tinyelf.com/)
* The [Emma COSMAC emulator](http://www.emma02.hobby-site.com/)

*possible substitutes: [MIX](http://www.amazon.com/Computer-Programming-Volumes-1-4A-Boxed/dp/0321751043/ref=sr_1_1?ie=UTF8&qid=1313197258&sr=8-1&tag=fogus-20), [The Art of Assembly Language Programming](http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/toc.html)*

## Frink

[Frink](http://futureboy.us/frinkdocs/) is a programming language that is generally known for its ability to handle and convert between a bevy of units of measure consistently throughout calculations.  For anyone who has created a complex system (or even a simple one for that matter) that needed to juggle varying units of measure, the complexity of the problem that Frink handles seamlessly is staggering.

    // Levenshtein distance is a built-in
    println[editDistance["kitten","sitting"]]
    
    // Convert feet to meters
    38 feet -> meters

#### More information

* [Frink FAQ](http://futureboy.us/frinkdocs/faq.html)
* A [Frink Applet](http://futureboy.us/frinkdocs/FrinkApplet.html)
* [Frink presentation](http://futureboy.us/frinkdocs/LL4.html)

*possible substitutions: none*

## APL

I will be honest.  I have never used APL and as a result find it impenetrable.  However, my inclusion in this list is entirely predicated on the strength of the amazing book *[A Programming Language](http://www.amazon.com/Programming-Language-Kenneth-Iverson/dp/0471430145?tag=fogus-20)* by Kenneth Iverson.  <img src="http://farm8.staticflickr.com/7417/9898656404_8b6b0a077e_o.jpg" width="150" height="156" style="float:left;" />  That is, the best programming language books infuse a strong sense of design[^des-book] into the narrative.  The strength of this approach is that not only are you learning a programming language, but you're also learning how to think in that language, and the very *why* of the language itself.  Iverson's book elucidates the motivating forces behind the design of APL (the need for a universal notation for computation to name a primary) and systematically builds the rationale for APL and the realizing language incrementally.  This book is not for the squeamish, and you will likely not fully understand APL by simply reading it (although I may be projecting here), but it's worth the effort.

    ⍝ John Conway's "Game of Life" in APL
    life←{                                  
        ↑1 ⍵∨.^3 4=+/,¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵
    }

[^des-book]: I have a draft of a post about books of this type... one day I'll complete it.

#### More information

*possible substitutes: [J](http://www.jsoftware.com/), [K](http://www.kuro5hin.org/story/2002/11/14/22741/791)*

## Haskell

Haskell is my mind-bending language of choice at the moment, but if you're not prepared to be humbled you may not find it as agreeable.  That is, before learning Haskell you will think that you know a lot about:

1. Static typing
2. Laziness
3. Purity

But Haskell will laugh at your knowledge and show you otherwise.  It's that simple -- and to learn more about these topics when you think you've learned all there is to know is a slap in the face -- but the good kind -- the kind that wakes you from your dogmatic slumber.

    -- Sierpinski triangle in Haskell
    
    sierpinski 0 = ["*"]
    sierpinski n = map ((space ++) . (++ space)) down ++
                   map (unwords . replicate 2) down
        where down = sierpinski (n - 1)
              space = replicate (2 ^ (n - 1)) ' '
    
    main = mapM_ putStrLn $ sierpinski 4

#### More information

* [Haskell Wiki](http://www.haskell.org/haskellwiki/Haskell)
* [10 Haskell one-liners to Impress Your Friends](http://blog.fogus.me/2011/06/03/10-haskell-one-liners-to-impress-your-friends/)
* [Wadler on type classes](http://homepages.inf.ed.ac.uk/wadler/topics/type-classes.html)


*possible substitutions: [ML](http://okmij.org/ftp/ML/index.html), [OCaml](http://caml.inria.fr/ocaml/index.en.html), [Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php), [Scala](http://www.scala-lang.org/)*

I hope that this list[^others] will motivate you to explore one or more (or all) of the languages herein.  I think you'll find the effort worthwhile should you approach the task with an open mind.

What are your Perlis Languages?

:F


[^my-list]: My modifications to Jason's original list can be viewed at <https://gist.github.com/1138647>.

[^not-just]: Programming language favoritism is just one of many prejudices that infect programmer thinking, but I choose to focus on it for the puposes of this post.

[^npo]: In no particular order.

[^scaladigms]: I sometimes poke good-natured fun at Scala about this, but sheesh they don't even have a builtin logic engine.  ;-)

[^cosmuck]: Although it seems to have been chosen by default since there were very few (if any) radiation-resistant microprocessors at the time.

[^inv]: I realize there is more to DbC than that, but this post is already overlong.

[^chosen]: Or those that chose them in most cases.

[^others]: There are others that I could have (should have?) mentioned.  Others like: [Squeak](http://squeak.org/), Scheme, Common Lisp, Prolog, and even more still... but I felt that others might like to talk about these and any others I've missed instead.

