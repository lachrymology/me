fun apply [F Args] 
  F(_Args)
end

fun empty?
"Determines if a list is empty"
[Lst]
  | len(Lst) = 0 |
end

fun push
"Push an element onto a list acting as a stack"
[E Lst]
  insert Lst 0 E
end

fun pop
"Pops an element off a list acting as a stack"
[Lst]
  rest Lst
end

fun xor
[X Y]
  | (X and not(Y))
    or
    (not(X) and Y)
  |
end

fun <-> 
[X Y]
  not | X xor Y |
end

fun -> 
[X Y]
  | not(x) Y |
end

fun map
[Lst F]
  if empty Lst?
    Lst
  else
    push F first(Lst),
         map(F rest(Lst)).
end

fun filter
[F Lst]
  if empty Lst?
    Lst
  else
    if F(first(Lst))
      push first Lst,
           filter(F rest(Lst)).
    else
      filter F rest(Lst).
end
           

