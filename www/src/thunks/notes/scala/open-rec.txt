Defining Open Recursion
Defining Open Recursion
Best reference is TAPL line 235 (specifically section 18.10, which is all about open recursion).  Wikipedia has a decent article: http://en.wikipedia.org/wiki/Open_recursion  There are probably also some papers floating around (likely by Cardeli) that address the concept.  Pierce explains it this way:
Most object-oriented languages actually support a more general form of recursive call between methods, known as open recursion, or late-binding of self.
This is fundamentally a form of self-application, where functions contained within the object record are given a reference to that object record.  As a form of self-application, it cannot be encoded in its full generality without recursive types.  All object-oriented languages therefore have a form of recursive types, however they don't (generally) allow that recursion to be applied to types in their full generality.  The encoding usually relies on iso-recursion, where the fold/unfold operations are wrapped up within object member access.  Pierce again (TAPL line 278, section 20.2):
In languages in the ML family, for example, every datatype definition implicitly introduces a recursive type.  Each use of one of the constructors to build a value of the datatype implicitly introduces a fold, and each constructor appearing in a pattern match implicitly forces an unfold.  Similarly, in Java each class definition implicitly introduces a recursive type, and invoking a method on an object involves an implicit unfold.  This felicitous overlap of mechanisms makes the iso-recursive style quite palatable in practice.
Please note the definitions of fold and unfold.  From Wikipedia, which refers to them as "roll" and "unroll" (I think those terms are more descriptive): http://en.wikipedia.org/wiki/Isorecursive_type#Isorecursive_types
From a practical standpoint, open-recursion is what makes the self pointer useful.  It is absolutely necessary if you want to encode inheritance in any form.  Consider:
class A {
  def foo(x: Int) = ...
  def bar = this.foo(42)
}
class B extends A {
  def baz = ...
  override def foo(x: Int) = ...
}
val b = new B
b.bar
When we invoke b.bar, we need it to delegate to the implementation of foo which is in B.  The only way to achieve this is for self to be a pointer passed as a hidden parameter to each function.  Thus, bar is given a pointer to B, which contains the revised definition of foo.  However, this is actually a very tricky thing when you introduce static typing.  Notice that the effective type signature of bar is as follows (where the return type of foo is T):
bar :: A -> T
However, when we access bar on B, it must have the following type signature:
bar :: B -> T
This is required since we may access the baz member, which is defined on B but not A.  Additionally, we may have overridden foo with a more specific type.  In general, function parameter types vary contravariantly.  However, the self parameter must vary covariantly, otherwise open recursion breaks down.  This is what I mean when I say that object encoding is *not* as simple as redefining the (.) operator to partially apply the right operand on the left operand.
Granted, all of this is only relevant in the presence of subtyping and with the goal of implementing inheritance, but that's exactly my point: these are essential features of OO, you can't just ignore them!  Whether or not they are useful or beneficial features is an orthogonal question.  If you want to claim to encode OO, you need to encode these features, and encoding these features requires finding a way to encode open recursion.  This is where all the trickiness arises.  See TAPL chapter 32.
Published by Google Docs–Report Abuse–Updated automatically every 5 minutes