Instapaper (Instapaper)
- Highlight Loc. 140-42  | Added on Tuesday, April 19, 2011, 10:31 PM

Relational databases may continue to perform a bit better on simple joins, but triple stores already produce better performance when it comes to complicated queries, rule handling and inferencing.
==========
Instapaper (Instapaper)
- Highlight Loc. 194-95  | Added on Tuesday, April 19, 2011, 10:37 PM

MenTaLguY’s lazy.rb),
==========
Instapaper (Instapaper)
- Highlight Loc. 203-6  | Added on Tuesday, April 19, 2011, 10:38 PM

In Combining Events And Threads For Scalable Network Services, published in 2007, Peng Li and Stephan Zdancewic describe building a network service that takes a hybrid approach by using threads and events.
==========
Instapaper (Instapaper)
- Highlight Loc. 227-29  | Added on Tuesday, April 19, 2011, 10:43 PM

In Haskell for the cloud, a wonderfully clear and well-written paper, Jeff Epstein, Andrew P. Black, and Simon Peyton-Jones describe implementing a distributed system that emulates the message passing functionality of Erlang, with some added Haskell flair.
==========
Instapaper (Instapaper)
- Highlight Loc. 260  | Added on Wednesday, April 20, 2011, 10:00 PM

“Composing Contracts” paper by Simon Peyton-Jones
==========
Instapaper (Instapaper)
- Highlight Loc. 879-80  | Added on Thursday, April 21, 2011, 06:55 AM

 There are two fundamental problems with type classes.  The first is that they insist that a type can implement a type class in exactly one way.
==========
Instapaper (Instapaper)
- Highlight Loc. 884-86  | Added on Thursday, April 21, 2011, 06:56 AM

 In F# the problem is even less excusable, in my opinion, for they started with the right thing (Caml) and eliminated the very thing that matters the most about ML, it’s module system!
==========
Instapaper (Instapaper)
- Highlight Loc. 914-15  | Added on Thursday, April 21, 2011, 06:59 AM

methodology, the “design patterns”, the “style guidelines”, all get in the way of teaching the principles.
==========
Instapaper (Instapaper)
- Highlight Loc. 924-25  | Added on Thursday, April 21, 2011, 07:01 AM

 Dijkstra used to say “beauty is our business”, to which I would add that life is too short, and bright minds too precious, to waste on ugly things.
==========
Instapaper (Instapaper)
- Highlight Loc. 928-29  | Added on Friday, July 30, 2010, 05:45 PM

Performance and Evaluation of Lisp Systems - Describes a methodology for improving Lisp performance.
==========
Instapaper (Instapaper)
- Highlight Loc. 932-33  | Added on Friday, July 30, 2010, 05:45 PM

Advanced Lisp Technology - Focus on recent research on Lisp in Japan.
==========
Instapaper (Instapaper)
- Highlight Loc. 1350-52  | Added on Friday, July 30, 2010, 05:51 PM

Representing Type Information in Dynamically Typed Languages ftp://ftp.cs.indiana.edu/pub/scheme-repository/doc/pubs/typeinfo.ps.gz How to keep track of what things are of what type. Useful in implementing list structured
==========
Instapaper (Instapaper)
- Highlight Loc. 1354-57  | Added on Friday, July 30, 2010, 05:51 PM

Definitional Interpreters for Higher-Order Programming Languages http://www.brics.dk/~hosc/local/HOSC-11-4-pp363-397.pdf This paper has a fairly thorough discussion of how to implement things like FirstClassFunctions and FirstClassContinuations in an interpreter when the language you are writing the interpreter in does not support those features.
==========
Instapaper (Instapaper)
- Highlight Loc. 1367-68  | Added on Friday, July 30, 2010, 05:52 PM

Guy Steele’s “FOO” language, as found on the ll1.mit.edu mailing list (very small demo implementation of call with continuations)
==========
Instapaper (Instapaper)
- Highlight Loc. 1385-87  | Added on Friday, July 30, 2010, 05:54 PM

Generalized LISP. D.C. Smith, Aug 1990. A coordinated set of high-level syntaxes for Common LISP. Contains Mlisp, Plisp and ordinary LISP, with an extensible framework for adding others. Written in Plisp. ftp://bric-a-brac.apple.com/dts/mac/lisp
==========
Instapaper (Instapaper)
- Highlight Loc. 326-27  | Added on Tuesday, April 26, 2011, 09:45 PM

The first thing critical reading courses teach is that analyzing a piece of text involves analyzing its author’s intent.
==========
Instapaper (Instapaper)
- Highlight Loc. 1743  | Added on Tuesday, April 26, 2011, 10:21 PM

parallelism arises naturally in an eager, not a lazy, language—for
==========
Instapaper (Instapaper)
- Highlight Loc. 1756-57  | Added on Tuesday, April 26, 2011, 10:23 PM

I wish to argue that laziness is important, but not for pure functional programming, but rather only in conjunction with effects.
==========
Instapaper (Instapaper)
- Highlight Loc. 1773-76  | Added on Tuesday, April 26, 2011, 10:26 PM

 The role of memoization is to transform an ephemeral process into a persistent data structure by recording the successive values produced by the process so that they can be “replayed” as necessary to permit the stream to have multiple futures.  Thus, rather than being a matter of efficiency, memoization is a matter of functionality, providing a persistent interface to an underlying ephemeral process.
==========
Instapaper (Instapaper)
- Highlight Loc. 1794-95  | Added on Tuesday, April 26, 2011, 10:29 PM

 True reuse operates at the level of abstractions, not at the level of the code that gives rise to them.
==========
Instapaper (Instapaper)
- Highlight Loc. 359-60  | Added on Wednesday, April 27, 2011, 10:02 PM

transformations should indeed be the central concept, and that the pointful notation, while easy to use, distracts us
==========
Instapaper (Instapaper)
- Highlight Loc. 376-77  | Added on Wednesday, April 27, 2011, 10:04 PM

a structured combinator style wich makes equational reasoning natural.
==========
Instapaper (Instapaper)
- Highlight Loc. 404-5  | Added on Wednesday, April 27, 2011, 10:09 PM

evaluation must be carried out only once for each thunk, and subsequent accesses must reuse the calculated value
==========
Instapaper (Instapaper)
- Highlight Loc. 1031  | Added on Wednesday, April 27, 2011, 10:16 PM

Harland, David M. “Polymorphic Programming Languages”, Ellis Horwood 1984.
==========
Instapaper (Instapaper)
- Highlight Loc. 1037-39  | Added on Wednesday, April 27, 2011, 10:16 PM

Grust, Torsten “The construction of a SASL Compiler” Web page, accessed 2005, Department of Mathematics and Computer Science University of Konstanz, Germany view detailsExternal link: Online
==========
Instapaper (Instapaper)
- Highlight Loc. 1165-66  | Added on Wednesday, April 27, 2011, 10:18 PM

Lunacy Lunacy is a virtual-machine/compiler for the ‘diamond-like’ core of the Scheme programming language
==========
Instapaper (Instapaper)
- Highlight Loc. 1166-67  | Added on Wednesday, April 27, 2011, 10:18 PM

HScheme a Scheme interpreter written in Haskell.
==========
Instapaper (Instapaper)
- Highlight Loc. 100-101  | Added on Thursday, April 28, 2011, 11:13 PM

Marc Lehmann, the author of libev also wrote Perl wrappers for libev and a Coroutine library for Perl, which might explain why the libev API is a good fit for wrapping in a high-level language.
==========
Instapaper (Instapaper)
- Highlight Loc. 219-20  | Added on Thursday, April 28, 2011, 11:24 PM

starting from next to nothing you get a lot more bang for your buck with functional programming.
==========
Instapaper (Instapaper)
- Highlight Loc. 448-50  | Added on Thursday, April 28, 2011, 11:31 PM

Relying on tests as a design specification is lazy and unprofessional because you are only testing a very small portion of the solution space of your application (and of course, your tests can have bugs).  Tests also fall extremely short of having the expressiveness needed to articulate the subtle shades that a real specification need to cover to be effective.
==========
Instapaper (Instapaper)
- Highlight Loc. 481-82  | Added on Thursday, April 28, 2011, 11:34 PM

They offer you all these nice ideas such as Test-Driven Development and Pair Programming but they never — ever — disclose the risks and the downsides. 
==========
Instapaper (Instapaper)
- Highlight Loc. 886-87  | Added on Friday, April 29, 2011, 07:30 PM

We should return a new function from f, every time it is called. But, C doesn’t let you define new functions at run-time. Clearly, function pointers alone are not sufficient. What we need are closures.
==========
Instapaper (Instapaper)
- Highlight Loc. 24-25  | Added on Friday, April 29, 2011, 10:29 PM

In a nutshell, Redline Smalltalk is a version of Smalltalk for the JVM aiming to be as compatible with Pharo Smalltalk as possible.
==========
Instapaper (Instapaper)
- Highlight Loc. 944-45  | Added on Friday, April 29, 2011, 10:42 PM

Scheme 48’s Lispy implementation language (LIL - an adjective coined at MIT in the 1970’s) was later dubbed ‘Pre-Scheme’.
==========
Instapaper (Instapaper)
- Highlight Loc. 986-87  | Added on Friday, April 29, 2011, 11:11 PM

VLisp (1995) was a verified Lisp developed by Mitch Wand, John Ramsdell, et al.
==========
Instapaper (Instapaper)
- Highlight Loc. 1221-23  | Added on Saturday, April 30, 2011, 03:09 PM

I’ve never seen a depth-first collector anywhere but T. By the way, the T garbage collector was written in T. This is also a slightly amazing feat. It was achieved by virtue of the fact that T was native-code compiled, and the garbage collector was written by the compiler authors.
==========
Instapaper (Instapaper)
- Highlight Loc. 1226-29  | Added on Saturday, April 30, 2011, 03:09 PM

Good Scheme compilers use a range of implementations for the lambdas in the program, depending upon what they can determine about the lambdas at compile time — how they’re used, to where they are passed, the relationship between the uses and the definition points, etc. Some lambdas just evaporate into nothing. Some lambdas turn into control-flow join points with associated register/variable bindings. Some lambdas turn into stack frames. But some lambdas cause heap allocation to produce general closures.
==========
Instapaper (Instapaper)
- Highlight Loc. 1247-48  | Added on Saturday, April 30, 2011, 03:11 PM

The AST was a tree of objects, connected together in both directions — parents knew their children; children also had links to their parents.
==========
Instapaper (Instapaper)
- Highlight Loc. 1263-65  | Added on Saturday, April 30, 2011, 03:13 PM

All hot compilers do DFA. It is necessary for all the really cool optimisations, like loop-invariant hoisting, global register allocation, global common subexpression elimination, copy propagation, induction-variable elimination.
==========
Instapaper (Instapaper)
- Highlight Loc. 1278-80  | Added on Saturday, April 30, 2011, 03:16 PM

It was also a massive validation of a thesis Steele had argued for his Master’s, which was that CPS was a great intermediate representation for a compiler. Orbit was totally hard-core about this — the first thing the compiler did was translate the user program into CPS, and that was the standard form on which the compiler operated for the rest of its execution.
==========
Instapaper (Instapaper)
- Highlight Loc. 1304-5  | Added on Saturday, April 30, 2011, 03:25 PM

So the lineage of the CPS-as-compiler-IR thesis goes from Steele’s Rabbit compiler through T’s Orbit to SML/NJ.
==========
Instapaper (Instapaper)
- Highlight Loc. 1313-14  | Added on Saturday, April 30, 2011, 03:28 PM

Kevin Lang (who built a little known but quite beautiful, elegant, free and portable object-oriented Scheme called Oaklisp),
==========
Instapaper (Instapaper)
- Highlight Loc. 1341-42  | Added on Saturday, April 30, 2011, 03:30 PM

(Implementing the runtime for a functional language, in some sense, requires you to implement a little virtual OS on top of the real, underlying OS.)
==========
Instapaper (Instapaper)
- Highlight Loc. 1360-62  | Added on Saturday, April 30, 2011, 03:33 PM

Scheme 48 had very little technical overlap w/T3 and Orbit — no native code compiler, no object system, no CPS IR. Its innovations were its module system, the language in which its VM was defined (“pre-scheme”), and its stack-management technology.
==========
Instapaper (Instapaper)
- Highlight Loc. 1363-67  | Added on Saturday, April 30, 2011, 03:34 PM

Kelsey wrote a paper on this and its advantages. The module system was somewhat like SML’s, but allowed modular macros and had another fairly cool feature: when you defined a module, clauses let you specify which files held the module’s source. But *other* clauses let you specify which “reader” procedure to use to translate the character stream in the files to the s-expression tree handed to the compiler. So you could handle files with different concrete syntax — R5RS syntax, scsh syntax, S48 syntax, PLT Scheme syntax, guile syntax, perhaps an infix syntax
==========
Instapaper (Instapaper)
- Highlight Loc. 1368-71  | Added on Saturday, April 30, 2011, 03:34 PM

Pre-scheme was quite interesting. Kelsey published a paper on it, as well, I believe. It was Scheme in the sense that you could load it into a Scheme system and run the code. But it was restrictive — it required you to write in a fashion that allowed complete Hindley-Milner static type inference, and all higher-order procedures were beta-substituted away at compile time, meaning you could *straightforwardly* translate a prescheme program into “natural” C code with C-level effiency.
==========
Instapaper (Instapaper)
- Highlight Loc. 1390-92  | Added on Saturday, April 30, 2011, 09:49 PM

Kelsey’s diss: Compilation by Program Transformation. Ph.D.dissertation, Yale University, May 1989. Research Report 702, Department of Computer Science. A conference-length version of this dissertation appears in POPL 89.
==========
Instapaper (Instapaper)
- Highlight Loc. 1452-53  | Added on Saturday, April 30, 2011, 09:54 PM

A tale of restarts - comp.lang.dylan message by Chris Double (“This is a “I’m glad I used Dylan” story…”)
==========
Instapaper (Instapaper)
- Highlight Loc. 972-73  | Added on Sunday, May 01, 2011, 08:16 AM

T’s object system, specifically the use of objects instead of strings as method selectors, had an influence on Joule.
==========
Instapaper (Instapaper)
- Highlight Loc. 1061-63  | Added on Sunday, May 01, 2011, 11:11 AM

(OlegKiselyov’s purely functional object-oriented system at http://pobox.com/~oleg/ftp/Scheme/index.html#pure-oo),
==========
Instapaper (Instapaper)
- Highlight Loc. 272-73  | Added on Thursday, May 05, 2011, 12:04 AM

Implementations of the next Lisp should not be influenced by previous implementations to make this operation fast, especially at the expense of poor performance of all other function calls.
==========
Instapaper (Instapaper)
- Highlight Loc. 307  | Added on Thursday, May 05, 2011, 12:06 AM

Aaron W. Hsu - A Philosophy on Scheme Modules
==========
Instapaper (Instapaper)
- Highlight Loc. 433  | Added on Thursday, May 05, 2011, 12:08 AM

The Scheme 48 Module System
==========
Instapaper (Instapaper)
- Highlight Loc. 488-89  | Added on Thursday, May 05, 2011, 12:12 AM

There's an extra clause in the DEFINE-STRUCTURE form that lets you specify the parser function used to parse the files named in the FILES clause. Now *that's* a general module system!
==========
Instapaper (Instapaper)
- Highlight Loc. 491  | Added on Thursday, May 05, 2011, 12:12 AM

scheme48-module-system community.schemewiki.org
==========
Vonnegut, Kurt - The Sirens of Titan (Kurt Vonnegut Jr.)
- Highlight Page 34  | Added on Friday, May 06, 2011, 10:52 PM

It has been said that Aristotle was the last man to be familiar with the whole of his own culture
==========
Instapaper (Instapaper)
- Highlight Loc. 1844-46  | Added on Saturday, May 07, 2011, 07:25 AM

 In an ironic twist the emphasis on monads in Haskell means that programming in Haskell is rather like programming in an updated dialect of Algol with a richer type structure than the original, but the same overall structure.
==========
Instapaper (Instapaper)
- Highlight Loc. 1877-78  | Added on Saturday, May 07, 2011, 07:26 AM

the ML module system can be deployed by you to impose the sorts of effect segregation imposed on you by default in Haskell.
==========
Instapaper (Instapaper)
- Highlight Loc. 103-4  | Added on Saturday, May 07, 2011, 07:42 AM

Erlang was designed for building soft real-time fault-tolerant systems that could be upgraded without taking them out of service.
==========
Instapaper (Instapaper)
- Highlight Loc. 129-31  | Added on Saturday, May 07, 2011, 07:45 AM

The wheel group is a group which limits the number of people who are able to su to root. This usually consists of a group named “wheel” and a set of users that are permitted to use the utility ‘su’ in order to change to root.
==========
Instapaper (Instapaper)
- Highlight Loc. 204-5  | Added on Saturday, May 07, 2011, 07:59 AM

OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP.
==========
Instapaper (Instapaper)
- Highlight Loc. 1156-58  | Added on Saturday, May 07, 2011, 06:29 PM

There is also a paper published in the book Advances in Object-Oriented Metalevel Architectures and Reflection, edited by Chris Zimmermann, with some more detailed suggestions.
==========
Instapaper (Instapaper)
- Highlight Loc. 1159-60  | Added on Saturday, May 07, 2011, 06:36 PM

the balance between giving the programmer of a CLOS implementation more possibilities to optimize things and the user of the MOP more flexilibity to change them is a delicate issue.
==========
Instapaper (Instapaper)
- Highlight Loc. 347-48  | Added on Sunday, May 08, 2011, 07:17 AM

Kiselyov has provided the world a purely-functional object system for you functional-programming junkies.
==========
Instapaper (Instapaper)
- Highlight Loc. 1083-87  | Added on Sunday, May 08, 2011, 05:38 PM

For languages that support currying and partial-application easily, there is one compelling series of arguments, originally from Chris Okasaki: Put the data structure as the last argument Why? You can then compose operations on the data nicely. E.g. insert 1 $ insert 2 $ insert 3 $ s. This also helps for functions on state.
==========
Instapaper (Instapaper)
- Highlight Loc. 1093-94  | Added on Sunday, May 08, 2011, 05:41 PM

A summary of the Okasaki view is given in his Edison library (again, another data structure library):
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 15  | Added on Sunday, May 08, 2011, 05:51 PM

Relational systems shouldn’t be used like simple access methods.*
==========
Instapaper (Instapaper)
- Highlight Loc. 87-88  | Added on Tuesday, May 10, 2011, 09:08 PM

With strict evaluation you can no longer with a straight face tell people: don’t use recursion, reuse the recursion patterns in map, filter, foldr, etc. It simply doesn’t work (in general).
==========
Instapaper (Instapaper)
- Highlight Loc. 26-30  | Added on Wednesday, May 11, 2011, 12:50 PM

You don’t need macros if you know what you are doing (your domain), and your system is already targeted at your domain. Adding macros to ML will have no impact on its usefulness for building theorem provers. You can’t make APL or Matlab better languages for working with arrays by adding macros. But as soon as you need to express new domain concepts in a language that does not natively support them, macros become essential to maintaining good, concise code.
==========
Instapaper (Instapaper)
- Highlight Loc. 67-68  | Added on Wednesday, May 11, 2011, 12:52 PM

Our current popular languages are designed to help losers lose less.
==========
Instapaper (Instapaper)
- Highlight Loc. 547-48  | Added on Wednesday, May 11, 2011, 01:09 PM

biography, Austin Osman Spare: The Life and Legend of London’s Lost Artist,
==========
Instapaper (Instapaper)
- Highlight Loc. 78-80  | Added on Wednesday, May 11, 2011, 06:42 PM

events can usually not be predicted exactly, which tends to make old-style programmers nervous. However, it turns out that this isn’t really necessary (and never has been!), and in fact shifts the emphasis from sequences of actions to transformations performed on streams of data.
==========
Vonnegut, Kurt - The Sirens of Titan (Kurt Vonnegut Jr.)
- Highlight Page 72  | Added on Wednesday, May 11, 2011, 11:14 PM

The recruits' eyes were as empty as the windows of abandoned textile mills.
==========
Instapaper (Instapaper)
- Highlight Loc. 515-17  | Added on Thursday, May 12, 2011, 10:56 AM

the earliest versions of ML in the mid-seventies used a type-inference scheme that explicitly allowed functions to have polymorphic types. The notion had been around in research literature earlier than that, but ML was the first real programming language to have the feature.
==========
Instapaper (Instapaper)
- Highlight Loc. 593-95  | Added on Thursday, May 12, 2011, 11:03 AM

Lisp macros and C macros do similar things: they allow the programmer to substitute one fragment of code with another before the program gets run. The big difference between the two is that while C macros work by scanning for and replacing literal text phrases within source code, Lisp macros replace portions of a parse-tree instead.
==========
Instapaper (Instapaper)
- Highlight Loc. 606-8  | Added on Thursday, May 12, 2011, 11:05 AM

Scheme, you could even write a macro that popped up a GUI with a dialog box that asked the user how to compile a particular expression! — and more, all with no extra effort. C++ templates can’t use normal run-time C++ code in the process of expanding,
==========
Instapaper (Instapaper)
- Highlight Loc. 640-41  | Added on Thursday, May 12, 2011, 11:09 AM

templates are really just a C++ version of Lisp macros geared towards generating type declarations rather than extending C++’s syntax
==========
Instapaper (Instapaper)
- Highlight Loc. 1381-82  | Added on Thursday, May 12, 2011, 11:18 AM

first-class macros can be a sensible notion.  See <http://www.bawden.org/mtt/>.
==========
Instapaper (Instapaper)
- Highlight Loc. 1409-11  | Added on Thursday, May 12, 2011, 11:20 AM

you may find two TRs interesting.  One describes "shorthands" (pronoun-like things) and the other describes "histories" (capture-like things): ftp://ftp.research.microsoft.com/pub/tr/tr-2000-03.ps ftp://ftp.research.microsoft.com/pub/tr/tr-2000-54.ps
==========
Instapaper (Instapaper)
- Highlight Loc. 1692  | Added on Thursday, May 12, 2011, 09:24 PM

identifier needs to be a combination of a name and a lexical context.
==========
Instapaper (Instapaper)
- Highlight Loc. 1693-94  | Added on Thursday, May 12, 2011, 09:24 PM

an identifier can be referenced from a place in the code where it is not visible by name.
==========
Instapaper (Instapaper)
- Highlight Loc. 1716-17  | Added on Thursday, May 12, 2011, 09:28 PM

the macro special-form should only be allowed in places where its complete flow is visible at compile time and should never be allowed to materialize as a run-time object.
==========
Instapaper (Instapaper)
- Highlight Loc. 1814-15  | Added on Thursday, May 12, 2011, 09:36 PM

Common Lisp's approach of modularizing the map from names to symbol objects instead of the map from symbol objects to bindings is wrong.  It comes from a 1974 historic context before lexical scoping.
==========
Instapaper (Instapaper)
- Highlight Loc. 1952-55  | Added on Thursday, May 12, 2011, 09:44 PM

For the Scheme I wrote for Junglee's next-generation wrapper language, I allowed three abbreviations: (1) If a non-alphanumeric symbol appeared in the first or second element of a list to be evaled, then the list is in infix form.  So (x = 3 + 4) is (= x (+ 3 4)), and (- x * y) is (* (- x) y).  And (2), if a symbol is delimited by a "(", then it moves inside the list.  So f(a b) is (f a b), while f (a b) is two s-exps.
==========
Instapaper (Instapaper)
- Highlight Loc. 2129-30  | Added on Thursday, May 12, 2011, 10:44 PM

Manuel Serrano's little built-in, lightweight grammar    language, then people can use regexps to recognise regular languages    and CFGs to recognise more complex things. 
==========
Instapaper (Instapaper)
- Highlight Loc. 2132  | Added on Thursday, May 12, 2011, 10:44 PM

 http://www.research.microsoft.com/~toddpro/
==========
Instapaper (Instapaper)
- Highlight Loc. 2144-45  | Added on Thursday, May 12, 2011, 10:46 PM

I wish every language used the same form for function call, hash fetches, and array indexing, the way arc does.
==========
Instapaper (Instapaper)
- Highlight Loc. 2147-48  | Added on Thursday, May 12, 2011, 10:46 PM

 (Apply should probably be called "call", if we're rebuilding Lisp from the ground up.)
==========
Instapaper (Instapaper)
- Highlight Loc. 2356-57  | Added on Thursday, May 12, 2011, 11:01 PM

 John Howland has built a course around a set of programs parallel-coded in J and Scheme!  Try --   http://www.cs.trinity.edu/About/The_Courses/cs301/
==========
Instapaper (Instapaper)
- Highlight Loc. 125-27  | Added on Saturday, May 14, 2011, 08:00 AM

Most explanations of conditions put little or no emphasis on functions having contracts that specify conditions. Few other explanations refer to the propensity of programmers to neglect to check special “error codes”.
==========
Instapaper (Instapaper)
- Highlight Loc. 602-3  | Added on Saturday, May 14, 2011, 09:02 AM

and since it’s persistent, you still have a nice warm cache even when you are recovering from a system
==========
Instapaper (Instapaper)
- Highlight Loc. 718-20  | Added on Saturday, May 14, 2011, 09:10 AM

 In the Algol family, the symbol   table is a compiler construction.  In the Lisp family, the symbol table   is a run-time resource.  In this sense, Scheme is a member of the Algol   family and not a member of the Lisp family.
==========
Instapaper (Instapaper)
- Highlight Loc. 960-61  | Added on Saturday, May 14, 2011, 09:18 AM

Your development experience is no longer code, compile, test, debug, iterate. Instead, the process becomes more holistic - coding, testing, debugging are all the same thing. Very Zen-like,eh? ;-)
==========
Instapaper (Instapaper)
- Highlight Loc. 94-95  | Added on Sunday, May 15, 2011, 07:33 AM

the CAP Theorem, which states that a distributed system cannot provide consistency, availability, and partition tolerance all at the same time (although two out of three of these properties are achievable at once).
==========
Instapaper (Instapaper)
- Highlight Loc. 108-11  | Added on Sunday, May 15, 2011, 07:48 AM

Dynamo sees its data as opaque binary blobs, so search is only possible using primary keys. Other NoSQL databases make different choices: MongoDB and CouchDB are document-oriented stores, meaning that data is stored as a JSON-like tree of keys and values; HBase and Cassandra store data as tuples, like a relational database, but without foreign keys.
==========
Instapaper (Instapaper)
- Highlight Loc. 119-21  | Added on Sunday, May 15, 2011, 07:49 AM

basic idea of consistent hashing is to decouple the value of a key from the machine it is stored on. If you do this you can add and remove machines from your data store without breaking anything.
==========
Instapaper (Instapaper)
- Highlight Loc. 195-96  | Added on Sunday, May 15, 2011, 07:59 AM

Dynamo can give you answers that are not definitive but are very useful, with semantics that the application can understand. What about “eventual consistency”?
==========
Instapaper (Instapaper)
- Highlight Loc. 354-56  | Added on Sunday, May 15, 2011, 10:55 AM

So “partition-tolerant” (“P”) means that any guarantee of consistency or availability is still guaranteed even if there is a partition. In other words, if a system is not partition-tolerant, that means that if the network can lose messages or any nodes can fail, then any guarantee of atomicity or consistency is voided.
==========
Instapaper (Instapaper)
- Highlight Loc. 990-91  | Added on Sunday, May 15, 2011, 12:18 PM

David Moon’s talk about how to do macros for a language with syntax was very innovative,
==========
Instapaper (Instapaper)
- Highlight Loc. 1018  | Added on Sunday, May 15, 2011, 12:20 PM

Ron Garret’s paper on a module system for Lisp.
==========
Instapaper (Instapaper)
- Highlight Loc. 1024  | Added on Sunday, May 15, 2011, 12:20 PM

Chubby: Google’s distributed lock system.
==========
Instapaper (Instapaper)
- Highlight Loc. 1069-71  | Added on Sunday, May 15, 2011, 05:41 PM

Here’s another one you didn’t mention.  Look at www.python.org and www.ruby-lang.com.  They immediately tell you what the language is and what’s good about it (and they’re attractive).  Now look at www.lisp.org. 
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 21  | Added on Tuesday, May 17, 2011, 02:35 PM

they map base tables fairly directly to physicalstorage,*and(asnotedpreviously)theirproductsthereforeprovidefarlessphysical data independence than relational systems are or should be capable of.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 25  | Added on Tuesday, May 17, 2011, 10:12 PM

Declarative means the system does the work, procedural means the user does the work
==========
Instapaper (Instapaper)
- Highlight Loc. 586-87  | Added on Wednesday, May 18, 2011, 06:10 PM

Google have recently introduced (internally) a DSL called Sawzall that is designed to be used with MapReduce for data analysis.
==========
Instapaper (Instapaper)
- Highlight Loc. 610-11  | Added on Wednesday, May 18, 2011, 06:11 PM

blackboard system in Lisp to experiment with the concepts, you can download the open source GBBopen library (the above diagram was taken from the GBBopen documentation).
==========
Instapaper (Instapaper)
- Highlight Loc. 669  | Added on Wednesday, May 18, 2011, 06:14 PM

Symbolics documentation, called “Hints for Macro Writers”, from the Lispm’s Concordia
==========
Instapaper (Instapaper)
- Highlight Loc. 922-23  | Added on Wednesday, May 18, 2011, 06:19 PM

Alan Bawden’s excellent paper “Quasiquotation in Lisp”
==========
Instapaper (Instapaper)
- Highlight Loc. 1008-10  | Added on Wednesday, May 18, 2011, 06:23 PM

The rule for interpreting nested backquotes is that a comma is paired with the innermost backquote surrounding (and “raises” its argument out of that context, so that the next comma matches up with the next backquote, and so forth).
==========
Instapaper (Instapaper)
- Highlight Loc. 1017-18  | Added on Wednesday, May 18, 2011, 06:24 PM

Notice how the order of evaluation is outside-in, while the nested-backquote rule is inside-out. Very, very confusing.
==========
Instapaper (Instapaper)
- Highlight Loc. 1022-23  | Added on Wednesday, May 18, 2011, 06:25 PM

Use nested backquotes. Use LIST, APPEND, etc. in the inner level, instead of backquote. Use an auxiliary function which uses backquote. Use an alternative backquote implementation.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 36  | Added on Wednesday, May 18, 2011, 10:09 PM

“multisets of rows”—where amultiset, also known as abag, is like a set except that it permits duplicates
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 36  | Added on Wednesday, May 18, 2011, 10:15 PM

Aproperobject/relationalsystemisjustarelationalsystemwithproper typesupport(includingproperuserdefinedtypesupportinparticular)—whichjustmeans it’saproperrelationalsystem,nomoreandnoless.Andwhatsomepeoplearepleasedto
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 37  | Added on Wednesday, May 18, 2011, 10:16 PM


==========
Instapaper (Instapaper)
- Highlight Loc. 364-69  | Added on Thursday, May 19, 2011, 10:32 PM

Message queuing systems work well because (in no particular order): they don’t pretend to be programming language procedure or method calls, so they avoid the associated impedance mismatch problems they don’t try to hide distributed systems issues coupling is low — drop a message into a queue here, pick up a message from a queue there queues can be persistent, or more generally, delivery guarantees can be varied as needed asynchrony payloads need not conform to some made-up IDL type system getting two different messaging systems to interoperate is easier than getting two different RPC or distributed object systems to interoperate
==========
Instapaper (Instapaper)
- Highlight Loc. 879-80  | Added on Friday, May 20, 2011, 01:05 PM

Dialects: Lisp 1.5, Lisp 2, Logo, MacLisp, Standard Lisp, Lisp Machine Lisp, InterLisp, 3-Lisp, LeLisp, EuLisp, ISLisp, Dylan, Prolog, Smalltalk, APL Scheme, T, Common Lisp
==========
Instapaper (Instapaper)
- Highlight Loc. 884-85  | Added on Friday, May 20, 2011, 01:06 PM

Books: The Art of the Meta-Object Protocol, Programming the Lisp Machine, 3-Lisp, Chaitin, Chinual
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 42  | Added on Saturday, May 21, 2011, 08:55 AM

SQL supports the following more or less self-explanatory system defined scalar types:* BOOLEAN NUMERIC(p,q) DATE CHARACTER(n) DECIMAL(p,q) TIME CHARACTER VARYING(n) INTEGER TIMESTAMP FLOAT(p) SMALLINT INTERVAL
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 54  | Added on Saturday, May 21, 2011, 09:20 AM

there’s a difference between a thing and a picture of a thing
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 56  | Added on Saturday, May 21, 2011, 02:40 PM

Notupleevercontainsanynulls.Thereasonisthat,bydefinition,everytuplecontains a value (of the appropriate type) for each of its attributes, and we saw in Chapter1 that nulls aren’t values—despite the fact that SQL often, though not always, refers to them explicitly as nullvalues.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 57  | Added on Saturday, May 21, 2011, 03:37 PM

Basically, two tuples are equal if and only if they’re the very same tuple (just as, for example, two integers are equal if and only if they’re the very same integer
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 60  | Added on Saturday, May 21, 2011, 03:40 PM

The relational model is so called because it deals with certain abstractions that we can think of informally as “tables” but are known in mathematics, formally, as relations
==========
Instapaper (Instapaper)
- Highlight Loc. 825-944  | Added on Saturday, May 21, 2011, 03:53 PM

(defun @eval (exp env cont)   (cond ((numberp exp) (funcall cont exp))         ((stringp exp) (funcall cont exp))         ((symbolp exp) (@lookup exp env cont))         ((eq (first exp) 'LAMBDA)          (funcall cont (list 'CLOSURE (second exp) (rest (rest exp)) env)))         ((eq (first exp) 'IF)          (@eval (second exp) env                 #'(lambda (test)                     (@eval (cond (test (second exp)) (t (third exp))) env cont))))         ((eq (first exp) 'LETREC)          (@evletrec (second exp)                     (third exp)                     (pairlis (mapcar #'first (second exp))                              (make-list (length (second exp)))                              env)                     cont))         (t (@eval (first exp) env                   #'(lambda (fn)                       (@evlis (rest exp) env                               #'(lambda (args) (@apply fn args cont)))))))) (defun @lookup (name env cont)   (cond ((null env) (funcall cont name))         ((eq (car (first env)) name) (funcall cont (cdr (first env))))         (t (@lookup name (rest env) cont)))) (defun @evlis (exps env cont)   (cond ((null exps) (funcall cont '()))         (t (@eval (first exps) env                   #'(lambda (arg)                       (@evlis (rest exps) env                               #'(lambda (args) (funcall cont (cons arg args))))))))) (defun @evletrec (bindings body env cont)   (cond ((null bindings) (@eval body env cont))         (t (@eval (second (first bindings)) env                   #'(lambda (fn)                       (rplacd (assoc (first (first bindings)) env) fn)                       (@evletrec (rest bindings) body env cont)))))) (defun @apply (fn args cont)   (cond ((eq fn '+) (funcall cont (+ (first args) (second args))))         ((eq fn '*) (funcall cont (* (first args) (second args))))         ((eq fn 'print)          (princ (first args))          (fresh-line)          (funcall cont (first args)))         ((eq fn 'call/cc)          (@apply (first args) (list (list 'CONTINUATION cont)) cont))         ((atom fn) (funcall cont 'UNDEFINED-FUNCTION))         ((eq (first fn) 'CLOSURE)          (@evlis (third fn) (pairlis (second fn) args (fourth fn))                  #'(lambda (vals) (funcall cont (first (last vals))))))         ((eq (first fn) 'CONTINUATION)          (funcall (second fn) (first args)))         (t (funcall cont 'UNDEFINED-FUNCTION)))) (defun test ()   (@eval '((call/cc             (lambda (goto)               (letrec ((start                         (lambda ()                           (print "start")                           (goto next)))                        (froz                         (lambda ()                           (print "froz")                           (goto last)))                        (next                         (lambda ()                           (print "next")                           (goto froz)))                        (last                         (lambda ()                           (print "last")                           (+ 3 4))))                       start))))          '()          (lambda (x) x))) Here is the output from running “test”: CL-USER> (test) start next froz
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 81  | Added on Saturday, July 31, 2010, 07:34 AM

You cannevertrusttheanswersyougetfromadatabasewithnulls.Inmyopinion,thisstateofaffairs is a complete showstopper.
==========
Instapaper (Instapaper)
- Highlight Loc. 2566  | Added on Thursday, May 26, 2011, 08:57 PM

A Rant About Jargon : EvolutionBlog
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 102  | Added on Friday, May 27, 2011, 07:05 AM

A given relvarRcontains, at any given time,allandonlythe tuples that represent true propositions (true instantiations of the relvar predicate forR) at the time in question—or,atleast,that’swhatwealwaysassumeinpractice.Inotherwords,inpractice weadoptwhat’scalledTheClosedWorldAssumption(seeAppendixAformoreonthistopic)
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 104  | Added on Friday, May 27, 2011, 07:17 AM

a databasecanbethoughtofasacollectionoftruepropositions.Infact,adatabase,together with the operators that apply to the propositions represented in that database (or sets of suchpropositions,rather),isalogicalsystem.Andby“logicalsystem”here,Imeanaformal system—like euclidean geometry, for example—that hasaxioms (“given truths”) andrules of inference by which we can provetheorems (“derived truths”) from those axioms. Indeed, itwasCodd’sverygreatinsight,whenheinventedtherelationalmodelbackin1969,that adatabase(despitethename)isn’treallyjustacollectionofdata;rather,it’sacollectionof facts, or in other words true propositions
==========
Instapaper (Instapaper)
- Highlight Loc. 1306-9  | Added on Saturday, May 28, 2011, 07:29 AM

In Smalltalk, a class combines data layout, supertype relations, and behavior into a single construct. CLOS increases the programmer’s flexibility by separating data layout and supertype relations from behavior. CLOS classes define the representation of data and the relations among types, and generic functions define behavior. Bard takes this factoring a step further, separating data layout from type relationships.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 110  | Added on Saturday, May 28, 2011, 08:04 AM

To say it again, the result of every relational operation is a relation
==========
Instapaper (Instapaper)
- Highlight Loc. 719-20  | Added on Saturday, May 28, 2011, 11:23 PM

Chomsky has a philosophy based on the idea that we should focus on the deep whys and that mere explanations of reality don’t matter.
==========
Instapaper (Instapaper)
- Highlight Loc. 137  | Added on Sunday, May 29, 2011, 07:45 AM

“Proposing a Unix Portability Experiment,”
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 118  | Added on Sunday, May 29, 2011, 10:22 AM

(NATURAL JOIN) in preference to other methods of formulating a join (but make sure columns with the same name are of the same type)
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 126  | Added on Sunday, May 29, 2011, 10:41 AM

Ingeneral,themonadicoperatorfdistributesoverthe dyadicoperatorgifandonlyiff(g(a,b))=g(f(a),f(b))forallaandb.Inordinaryarithmetic, for example, SQRT (nonnegative square root) distributes over multiplication, because SQRT (a *b ) = SQRT (a ) * SQRT (b ) for alla andb (takef as SQRT andg as “*”); thus, a numeric expression optimizer can always replace either of these expressions by the other when doing numeric expression transformation.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 126  | Added on Sunday, May 29, 2011, 10:41 AM

Asacounterexample,SQRTdoesnotdistributeoveraddition,becausethe square root ofa +b is not equal to the sum of the square roots ofa andb, in general.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 128  | Added on Sunday, May 29, 2011, 05:23 PM

What was, and is, really needed istwo separate definitions, one inside the program and one outside; the one inside would represent the programmer’s perception of the database (and would provide the necessary compile time checking on queries, etc.), the one outside would represent the database “as it really is.” Then, if it subsequently becomes necessary to change the definition of the database “as it really is,” data independence is preserved by changing the mapping between the two definitions.
==========
Instapaper (Instapaper)
- Highlight Loc. 113-14  | Added on Monday, May 30, 2011, 08:39 AM

“object-oriented equational rewrite rules” and IRC bots. > http://lists.canonical.org/pipermail/kragen-tol/2007-March/000855.html
==========
Instapaper (Instapaper)
- Highlight Loc. 122-23  | Added on Monday, May 30, 2011, 08:40 AM

self-quoting keywords, like in Prolog or Erlang (lower-case), or Common Lisp or Ruby (with colons).
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 78-81  | Added on Monday, May 30, 2011, 11:09 PM

From Plato, to be sure, he got what all of us must get, but his real forefather was Heraclitus. It is in Heraclitus that one finds the germ of his primary view of the universe—a view, to wit, that sees it, not as moral phenomenon, but as mere aesthetic representation. The God that Nietzsche imagined, in the end, was not far from the God that such an artist as Joseph Conrad imagines—a supreme craftsman, ever experimenting, ever coming closer to an ideal balancing of lines and forces, and yet always failing to work out the final harmony.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 114-18  | Added on Monday, May 30, 2011, 11:15 PM

if his attack upon Christianity were mere sound and fury, signifying nothing, then there would be no call for anathemas from the sacred desk. But these onslaughts, in point of fact, have behind them a tremendous learning and a great deal of point and plausibility—there are, in brief, bullets in the gun, teeth in the tiger,—and so it is no wonder that they excite the ire of men who hold, as a primary article of belief, that their acceptance would destroy civilization, darken the sun, and bring Jahveh to sobs upon His Throne.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 121-24  | Added on Monday, May 30, 2011, 11:17 PM

It seemed to him of small moment what they believed, so long as it was safely imbecile. What he stood against was not their beliefs, but the elevation of those beliefs, by any sort of democratic process, to the dignity of a state philosophy—what he feared most was the pollution and crippling of the superior minority by intellectual disease from below.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 147-49  | Added on Monday, May 30, 2011, 11:20 PM

what he saw in Christian ethics, under all the poetry and all the fine show of altruism and all the theoretical benefits therein, was a democratic effort to curb the egoism of the strong—a conspiracy of the chandala against the free functioning of their superiors, nay, against the free progress of mankind.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 160-63  | Added on Monday, May 30, 2011, 11:31 PM

an idea that happens to be true—or, more exactly, as near to truth as any human idea can be, and yet remain generally intelligible—it seems to me that such an idea carries a special and often fatal handicap. The majority of men prefer delusion to truth. It soothes. It is easy to grasp. Above all, it fits more snugly than the truth into a universe of false appearances—of complex and irrational phenomena, defectively grasped.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 165-67  | Added on Monday, May 30, 2011, 11:32 PM

The forgotten ideas are those of the men who put them forward soberly and quietly, hoping fatuously that they would conquer by the force of their truth; these are the ideas that we now struggle to rediscover.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 202-3  | Added on Monday, May 30, 2011, 11:37 PM

In the present case my money is laid upon the plutocracy. It will win because it will be able, in the long run, to enlist the finer intelligences.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 204-5  | Added on Tuesday, May 31, 2011, 11:55 PM

Politics, under a democracy, reduces itself to a mere struggle for office by flatterers of the proletariat; even when a superior man prevails at that disgusting game he must prevail at the cost of his self-respect.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 250-51  | Added on Wednesday, June 01, 2011, 06:54 AM

the average philosophical writer, when he essays to expose his ideas, makes such inordinate drafts upon the parts of speech that the dictionary is almost emptied
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 283-84  | Added on Wednesday, June 01, 2011, 04:42 PM

he must never ask of the truth whether it brings profit to him or a fatality to him....
==========
Instapaper (Instapaper)
- Highlight Loc. 1241-44  | Added on Friday, June 03, 2011, 08:02 PM

The >> and >>= functions concatenate IO actions in exactly the same sense that the ++ function concatenates Strings. It’s possible for us to do this because e.g. calling readLn doesn’t immediately read from standard input. It is a referentially transparent expression that returns an IO action.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 52-54  | Added on Friday, June 03, 2011, 11:07 PM

“I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.”
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 86-89  | Added on Friday, June 03, 2011, 11:11 PM

This is not to say that testing has no use. The bottom line is that all ways of attempting to understand a system have their limitations (and this includes both informal reasoning — which is limited in scope, imprecise and hence prone to error — as well as formal reasoning — which is dependent upon the accuracy of a specification). Because of these limitations it may often be prudent to employ both testing and reasoning together.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 103-4  | Added on Friday, June 03, 2011, 11:14 PM

“From the complexity comes the difficulty of enumerating, much less understanding, all the possible states of the program, and from that comes the unreliability”
==========
Instapaper (Instapaper)
- Highlight Loc. 508-9  | Added on Saturday, June 04, 2011, 07:15 AM

  [1] Hofer et al. Polymorphic embedding of DSLs. GPCE 2008.
==========
Instapaper (Instapaper)
- Highlight Loc. 1663-64  | Added on Saturday, June 04, 2011, 08:28 AM

Professor Michael Godfrey has done some studies on the Vim architecture and its development. You can find this at http://plg.uwaterloo.ca/~migod/.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 322  | Added on Saturday, June 04, 2011, 09:07 PM

the process of evolution does not necessarily mean elevation, enhancement, strengthening.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 327-28  | Added on Saturday, June 04, 2011, 09:08 PM

Christianity: it has waged a war to the death against this higher type of man,
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 378-80  | Added on Saturday, June 04, 2011, 09:14 PM

Whoever has theological blood in his veins is shifty and dishonourable in all things. The pathetic thing that grows out of this condition is called faith: in other words, closing one’s eyes upon one’s self once for all, to avoid suffering the sight of incurable falsehood.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 380-82  | Added on Saturday, June 04, 2011, 09:15 PM

People erect a concept of morality, of virtue, of holiness upon this false view of all things; they ground good conscience upon faulty vision; they argue that no other sort of vision has value any more,
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 406  | Added on Saturday, June 04, 2011, 09:19 PM

every man find his own virtue, his own categorical imperative.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 411-12  | Added on Saturday, June 04, 2011, 09:20 PM

What destroys a man more quickly than to work, think and feel without inner necessity, without any deep personal desire, without pleasure—as a mere automaton of duty? That is the recipe for décadence, and no less for idiocy....
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 491-93  | Added on Sunday, June 05, 2011, 07:17 AM

Wherever the will to power begins to decline, in whatever form, there is always an accompanying decline physiologically, a décadence. The divinity of this décadence, shorn of its masculine virtues and passions, is converted perforce into a god of the physiologically degraded, of the weak.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 588-89  | Added on Sunday, June 05, 2011, 07:40 AM

a man gets any pleasure out of the notion that he has been saved from sin, it is not necessary for him to be actually sinful, but merely to feel sinful.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 595-96  | Added on Sunday, June 05, 2011, 07:41 AM

To satisfy the ardor of the woman a beautiful saint must appear on the scene, and to satisfy that of the men there must be a virgin.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 621-22  | Added on Sunday, June 05, 2011, 08:15 AM

anti-Semitism without realizing that it is no more than the final consequence of Judaism.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 764-65  | Added on Sunday, June 05, 2011, 08:37 AM

strange and sickly world into which the Gospels lead us—a world apparently out of a Russian novel, in which the scum of society, nervous maladies and “childish” idiocy
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 864-67  | Added on Sunday, June 05, 2011, 08:59 AM

This “bearer of glad tidings” died as he lived and taught—not to “save mankind,” but to show mankind how to live. It was a way of life that he bequeathed to man: his demeanour before the judges, before the officers, before his accusers—his demeanour on the cross. He does not resist; he does not defend his rights; he makes no effort to ward off the most extreme penalty—more, he invites it.... And he prays, suffers and loves with those, in those, who do him evil....
==========
MCFiA CH 01 (kawright)
- Highlight Page 1  | Added on Monday, June 06, 2011, 07:28 AM

If it gets thought of at all, it's treated like incontinence underwear - people want to pretend it doesn't exist
==========
MCFiA CH 01 (kawright)
- Highlight Page 10  | Added on Monday, June 06, 2011, 07:49 AM

But what you politely tell Bert is that he's missing a bigger point. While it is easy to write a bad crawler, it's not so easy to write a good one. Complex issues arise that will not even occur to a novice - for example, the interaction between throttling and document scheduling, or how to deal with document security across disparate kinds of repository.
==========
MCFiA CH 01 (kawright)
- Highlight Page 22  | Added on Monday, June 06, 2011, 07:55 AM

since these documents are not really going anywhere, we don’t need to worry about their se
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 2  | Added on Monday, June 06, 2011, 08:00 AM

But there is one thing that has Bert worried.
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 3  | Added on Monday, June 06, 2011, 08:03 AM

The result of all this is that persistent threads are not permitted to undertake any socket activities. More broadly, persistent threads cannot undertake any activities which cannot be interrupted
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 4  | Added on Monday, June 06, 2011, 08:05 AM

t should be clear that transient threads must not use any of the ManifoldCF core services.
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 10  | Added on Monday, June 06, 2011, 08:10 AM

For example, your code must never ignore a ManifoldCFException.INTERRUPTEDtype exception, because if it does it may block the shutdown of a persistent thread
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 26  | Added on Monday, June 06, 2011, 08:18 AM

There are, in general, two ways to deal with deadlock. The first way is to avoid having it occur at all. The best way to avoid deadlock is to guarantee that locks are always obtained in the same order, no matter which thread is obtaining the locks
==========
MCFiA CH 05 (Karl Wright)
- Highlight Page 37  | Added on Monday, June 06, 2011, 08:25 AM

Since it is possible to do this, the solution to the problem is to use timed expiration in conjunction with LRU expiration, thus guaranteeing a limit on the number of cached per-user objects
==========
MCFiA CH 12 (Karl Wright)
- Highlight Page 1  | Added on Monday, June 06, 2011, 08:28 AM

a strict sense, you will not need to know this stuff in order to write decent connectors, but you will certainly be more effective at diagnosing any problems with connectors you write if you have a strong notion of how ManifoldCF operates under the covers
==========
MCFiA CH 11 (Karl Wright)
- Highlight Page 5  | Added on Monday, June 06, 2011, 08:46 AM

requirement to be able to read specific small subsets of potentially very large result sets. In SQL, this is done by creating an index that matches the ordering required for the retrieval, and thus the retrieval becomes effectively a read of the index itself. But there are no comparable structures in common No-SQL implementations that appear to permit this
==========
MCFiA CH 11 (Karl Wright)
- Highlight Page 34  | Added on Monday, June 06, 2011, 08:51 AM

Congratulations, you’ve finally made it through the most technically demanding chapter of this book!
==========
MCFiA CH 10 (Karl Wright)
- Highlight Page 3  | Added on Monday, June 06, 2011, 08:52 AM

This process theoretically consists of multiple independent agents., along with support systems that these agents can use to perform incremental indexing of documents
==========
MCFiA CH 10 (Karl Wright)
- Highlight Page 6  | Added on Monday, June 06, 2011, 08:53 AM

The Pull Agent component is the only agent currently part of ManifoldCF. Its purpose is to crawl all of those repositories best suited to a pull model. This turns out to be all of the repositories ManifoldCF supports at this time
==========
MCFiA CH 10 (Karl Wright)
- Highlight Page 6  | Added on Monday, June 06, 2011, 08:54 AM

started and stopped, which (if you think about it) means that it has threads of its
==========
MCFiA CH 09 (Karl Wright)
- Highlight Page 2  | Added on Monday, June 06, 2011, 08:59 AM

Since Docs4U has no ability to store user or group based metadata, this will present a realistic challenge to the task of mapping security tokens, as we will see.
==========
Instapaper (Instapaper)
- Highlight Loc. 459  | Added on Monday, June 06, 2011, 10:40 PM

libc replacement, Bionic.
==========
Instapaper (Instapaper)
- Highlight Loc. 984-86  | Added on Monday, June 06, 2011, 11:07 PM

A concurrent program is one with multiple threads of control.  Each thread of control has effects on the world, and those threads are interleaved in some arbitrary way by the scheduler.  We say that a concurrent programming language is non-deterministic, because the total effect of the program may depend on the particular interleaving at runtime. 
==========
Instapaper (Instapaper)
- Highlight Loc. 1012-13  | Added on Monday, June 06, 2011, 11:11 PM

Concurrency is most useful as a method for structuring a program that needs to communicate with multiple external clients simultaneously, or respond to multiple asynchronous inputs. 
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 952-54  | Added on Tuesday, June 07, 2011, 06:39 AM

his disciples were very far from forgiving his death—though to have done so would have accorded with the Gospels in the highest degree; and neither were they prepared to offer themselves, with gentle and serene calmness of heart, for a similar death.... On the contrary, it was precisely the most unevangelical of feelings, revenge, that now possessed them.
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 967  | Added on Tuesday, June 07, 2011, 06:47 AM

sacrifice of the innocent for the sins of the guilty!
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 978-79  | Added on Tuesday, June 07, 2011, 06:49 AM

Buddhism promises nothing, but actually fulfils; Christianity promises everything, but fulfils nothing.—Hard
==========
The Antichrist (Friedrich Wilhelm Nietzsche)
- Highlight Loc. 1423-25  | Added on Tuesday, June 07, 2011, 10:24 PM

Every one enjoys the privileges that accord with his state of existence. Let us not underestimate the privileges of the mediocre. Life is always harder as one mounts the heights—the cold increases, responsibility increases. A high civilization is a pyramid: it can stand only on a broad base; its primary prerequisite is a strong and soundly consolidated mediocrity.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 171  | Added on Wednesday, June 08, 2011, 07:02 AM

While most current products do support key and foreign key constraints, they don’t support CREATE ASSERTION at all, and they don’t support base table constraints any more complicated than simple row constraints. (Formally, they don’t permit base table constraints to contain a subquery.) In practice, therefore, most constraints will have to be enforced by means of procedural code
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 172  | Added on Wednesday, June 08, 2011, 07:09 AM

•Atomicity means that transactions are “all or nothing.” •Consistency means that any given transaction transforms a consistent state of the databaseintoanotherconsistentstate,withoutnecessarilypreservingconsistencyatall intermediate points. (A database state is consistent if and only if it satisfies all defined constraints; consistency is just another word for integrity in this context.) •Isolation means that any given transaction’s updates are concealed from all other transactions until such time as the given transaction commits. •Durability means that once a given transaction commits, its updates survive in the database, even if there’s a subsequent system crash
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 172  | Added on Wednesday, June 08, 2011, 07:22 AM

Now, one argument in favor of transactions has always been that they’re supposed to act as “a unit of integrity” (that’s what the consistency property is all about). But I don’t believe that argument; as I’ve more or less said already, I believe statements have to be that unit; in other words, I believe database constraints must be satisfiedat statement boundaries.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 157-58  | Added on Friday, June 10, 2011, 08:51 PM

forced to specify an aspect of how the system should work rather than simply what is desired.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 272-73  | Added on Friday, June 10, 2011, 09:15 PM

The primary strength of functional programming is that by avoiding state (and side-effects) the entire system gains the property of referential transparency
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 274-75  | Added on Friday, June 10, 2011, 09:16 PM

Everything which can possibly affect the result in any way is always immediately visible in the actual parameters.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 714-15  | Added on Saturday, June 11, 2011, 09:08 PM

A relation is best seen as a homogeneous set of records, each record itself consisting of a heterogeneous set of uniquely named attributes
==========
Marz_Ch01 
- Highlight Page 2  | Added on Monday, June 13, 2011, 09:29 PM

30000 gigabytes of d
==========
Marz_Ch01 
- Highlight Page 2  | Added on Monday, June 13, 2011, 09:30 PM

es. They are not one-size-fits-all soluti
==========
Marz_Ch01 
- Highlight Page 2  | Added on Monday, June 13, 2011, 09:31 PM

o. The open source community responded in the years following with projects like Hadoop, HBase, MongoDB, Cassandra, RabbitMQ, and countless other proj
==========
Marz_Ch01 
- Note Page 2  | Added on Monday, June 13, 2011, 09:32 PM

jumpimg around
==========
Marz_Ch01 
- Highlight Page 3  | Added on Monday, June 13, 2011, 10:34 PM

Centralized: Relational databases are designed to be run on one machine. You can shard and/or replicate a relational database
==========
Marz_Ch01 
- Highlight Page 4  | Added on Monday, June 13, 2011, 10:36 PM

In the next few sections we'll discuss two very common techniques used to scale applications: inserting a queue to do asynchronous, batched updates and sharding the database across multiple machines to increase write throughput.
==========
Marz_Ch01 
- Highlight Page 8  | Added on Monday, June 13, 2011, 10:42 PM

amount of complications to doing this, and implementing this scheme is equivalent to writing an entire NoSQL database
==========
Marz_Ch01 
- Highlight Page 8  | Added on Monday, June 13, 2011, 10:42 PM

The Big Data databases we will be using make use of the sharding plus replication strategy internally, but they hide the complexities of it from you (for the most part)
==========
Marz_Ch01 
- Highlight Page 15  | Added on Monday, June 13, 2011, 10:54 PM

andom writes causes most of the complexity in a normal databases.
==========
Marz_Ch01 
- Bookmark Page 18  | Added on Monday, June 13, 2011, 10:59 PM


==========
Marz_Ch01 
- Highlight Page 18  | Added on Monday, June 13, 2011, 11:04 PM

There is very little "magic" happening behind the scenes as compared to something like a SQL query planner.
==========
Marz_Ch01 
- Highlight Page 20  | Added on Monday, June 13, 2011, 11:08 PM

They all have different semantics and are meant to be used for specific purposes. They are *not* meant to be used for arbitrary data warehousing.
==========
Marz_Ch01 
- Highlight Page 21  | Added on Monday, June 13, 2011, 11:10 PM


==========
Marz_Ch01 
- Highlight Page 21  | Added on Monday, June 13, 2011, 11:10 PM


==========
Marz_Ch02 
- Highlight Page 3  | Added on Monday, June 13, 2011, 11:18 PM


==========
Marz_Ch02 
- Highlight Page 4  | Added on Monday, June 13, 2011, 11:19 PM

gure 2.2 Flow of data in the batch layer
==========
Marz_Ch02 
- Highlight Page 5  | Added on Monday, June 13, 2011, 11:22 PM

The right way to think about the person's location is that it can have different values over time
==========
Instapaper (Instapaper)
- Highlight Loc. 1446-47  | Added on Tuesday, June 14, 2011, 11:38 PM

Warhol wrote in his memoir “Popism,”
==========
Instapaper (Instapaper)
- Highlight Loc. 1448-49  | Added on Tuesday, June 14, 2011, 11:39 PM

Apparently, most people love watching the same basic thing, as long as the details are different.”
==========
Instapaper (Instapaper)
- Highlight Loc. 1452  | Added on Tuesday, June 14, 2011, 11:39 PM

Béla Tarr’s seven-hour
==========
Instapaper (Instapaper)
- Highlight Loc. 1452-53  | Added on Tuesday, June 14, 2011, 11:39 PM

“Sátántangó”
==========
Instapaper (Instapaper)
- Highlight Loc. 1458-59  | Added on Tuesday, June 14, 2011, 11:40 PM

money you spent for your ticket was well worth all this clamor,
==========
Instapaper (Instapaper)
- Highlight Loc. 1466-69  | Added on Tuesday, June 14, 2011, 11:41 PM

MOVIES may be the only art form whose core audience is widely believed to be actively hostile to ambition, difficulty or anything that seems to demand too much work on their part. In other words, there is, at every level of the culture — among studio executives, entertainment reporters, fans and quite a few critics — a lingering bias against the notion that movies should aspire to the highest levels of artistic accomplishment.
==========
Instapaper (Instapaper)
- Highlight Loc. 63  | Added on Wednesday, June 15, 2011, 06:47 AM

The Passenger by Antonioni?
==========
Instapaper (Instapaper)
- Highlight Loc. 213  | Added on Wednesday, June 15, 2011, 03:03 PM

Saul Bellow or a William Faulkner or an Ernest Hemingway.
==========
Tarpit (Ben Moseley and  Peter Marks)
- Highlight Loc. 807-10  | Added on Wednesday, June 15, 2011, 06:54 PM

Essential State A Relational definition of the stateful components of the system Essential Logic Derived-relation definitions, integrity constraints and (pure) functions Accidental State and Control A declarative specification of a set of performance optimizations for the system Other A specification of the required interfaces to the outside world (user and system interfaces)
==========
Marz_Ch02 
- Highlight Page 14  | Added on Thursday, June 16, 2011, 12:02 PM

enum GenderType {
==========
Marz_Ch03 
- Highlight Page 3  | Added on Saturday, July 31, 2010, 02:08 AM


==========
Marz_Ch03 
- Highlight Page 8  | Added on Sunday, August 01, 2010, 10:24 AM

igabytes or terabytes.
==========
Marz_Ch04 
- Highlight Page 2-3 | Added on Sunday, August 01, 2010, 10:34 AM

ng. You'll see that MapReduce is difficult to work3 with directly
==========
Marz_Ch04 
- Highlight Page 5  | Added on Sunday, August 01, 2010, 10:36 AM


==========
Marz_Ch04 
- Highlight Page 9  | Added on Sunday, August 01, 2010, 10:42 AM

An aggregator on the other hand requires more work to implement but has its own benefits
==========
Marz_Ch04 
- Bookmark Page 9  | Added on Sunday, August 01, 2010, 10:42 AM


==========
Marz_Ch04 
- Note Page 9  | Added on Sunday, August 01, 2010, 10:43 AM

it would be niceto see visualizations of effects of these ops
==========
Marz_Ch05 
- Highlight Page 3  | Added on Sunday, August 01, 2010, 10:54 AM

The serving layer database that's the easiest to use and operate is ElephantDB, and that's the tool we'll be focused on in this chapter. ElephantDB is phenomenal for lots of use cases, but it does have some restrictions
==========
Marz_Ch05 
- Highlight Page 3  | Added on Sunday, August 01, 2010, 10:55 AM

speed layer views are transient -- once the data it's compensating for gets into the serving layer the speed layer view is not needed anymore
==========
Marz_Ch05 
- Highlight Page 4  | Added on Sunday, August 01, 2010, 10:56 AM

three options of databases to use for the serving layer: ElephantDB, Voldemort, and HBase
==========
Marz_Ch05 
- Highlight Page 5  | Added on Sunday, August 01, 2010, 10:57 AM

plementation of Dyamo,
==========
Marz_Ch05 
- Highlight Page 5  | Added on Sunday, August 01, 2010, 10:58 AM

ince ElephantDB is more specialized than Voldemort (since it can't be used as a random write database), it is simpler to configure and use.
==========
Marz_Ch05 
- Note Page 5  | Added on Sunday, August 01, 2010, 10:59 AM

there is a lot implcit to this stae.ment that the rreader might not get at this point
==========
Marz_Ch05 
- Highlight Page 5  | Added on Sunday, August 01, 2010, 11:02 AM

Base is a very complex database that is difficult to operate correctly. Additionally, using HBase is much more complex.
==========
Marz_Ch05 
- Note Page 5  | Added on Sunday, August 01, 2010, 11:02 AM

these are consideratons wo distinction. presumeably youll weigh the good and bad and decide for or gainst hbase.  complex might be ok if hbase serves your overall goals
==========
Marz_Ch05 
- Highlight Page 11  | Added on Sunday, August 01, 2010, 11:06 AM

The configuration files are ".clj" files. ".clj" is the file extension for Clojure, a Lisp-based programming language that interoperates with the JVM
==========
Marz_Ch05 
- Highlight Page 13  | Added on Sunday, August 01, 2010, 11:07 AM

To run this command, you need to install leiningen (http://github.com/technomancy/leiningen). Leiningen is a build tool for Clojure
==========
Marz_Ch05 
- Highlight Page 20  | Added on Sunday, August 01, 2010, 11:08 AM

ElephantDB captures much of the low hanging fruit of the space,
==========
Marz_Ch05 
- Highlight Page 20  | Added on Sunday, August 01, 2010, 11:09 AM

ElephantDB captures much of the low hanging fruit of the space, but you saw that it has some limitations
==========
Marz_Ch05 
- Note Page 20  | Added on Sunday, August 01, 2010, 11:09 AM

i fear some readers will be confused. is elphant good as a db in production or better for this book? the senses are mixed in this chapter.
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 300  | Added on Sunday, June 19, 2011, 10:52 PM

  Joy to humanity!   No more shall vanity,   Death and inanity   Hold thee in prison!
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 550  | Added on Sunday, June 19, 2011, 11:12 PM

crotchets,
==========
Instapaper (Instapaper)
- Highlight Loc. 104-5  | Added on Monday, June 20, 2011, 06:41 AM

Disregarding students’ investment as mere rigmarole is equivalent to asserting that Gandhi went on hunger strikes because he wasn’t hungry. Many of us sacrificed for our education and you better damn well pay attention to it.
==========
Instapaper (Instapaper)
- Highlight Loc. 906-7  | Added on Tuesday, June 21, 2011, 01:49 PM

The sad truth is we value selling products over our children’s future well being and education. We value buying stuff right now over investing in a better future. We value gluttony over governance.
==========
Instapaper (Instapaper)
- Highlight Loc. 909-11  | Added on Tuesday, June 21, 2011, 01:50 PM

This whole Groupon thing has gotten out of control. We are falling farther behind the world in education, yet we seem to excel in creating new ways to spend money quicker and eat cupcakes faster.
==========
Instapaper (Instapaper)
- Highlight Loc. 1265-71  | Added on Wednesday, June 22, 2011, 12:09 PM

No. If either of the following statements were true, Asian and Indian kids would be performing poorly in American public schools as well: American public schooling is simply poor altogether, and it’s impossible to do well American public school is biased against non-whites, which is why blacks and hispanics do so poorly But Asian and Indian kids are academically dominating. These students aren’t just outperforming Blacks and Hispanics in the same exact schools, they’re also outperforming White students. Why is that? How are Asians and Indians doing so well in an academic environment that’s supposedly hard to thrive in?
==========
Instapaper (Instapaper)
- Highlight Loc. 1323-25  | Added on Wednesday, June 22, 2011, 12:13 PM

One of the things Alexander Bird’s book Philosophy of Science taught me was how to identify unproductive skepticism, even when it is not obvious, in things such as Hume’s problem of induction.
==========
Instapaper (Instapaper)
- Highlight Loc. 335-36  | Added on Wednesday, June 22, 2011, 12:41 PM

A fexpr is a procedure that acts on the syntax of its operands, rather than on the values determined by that syntax.
==========
Instapaper (Instapaper)
- Highlight Loc. 367-71  | Added on Wednesday, June 22, 2011, 12:44 PM

A list to be evaluated is a combination; its first element is the operator, and the rest of its elements are operands.  The action designated by the operator is a combiner.  A combiner that acts directly on its operands is an operative.  (Legacy terms: an operative that is a data value is a fexpr, an operative that is not a data value is a special form.)  A combiner that isn’t operative is applicative; in that case, the operands are all evaluated, the results of these evaluations are called arguments, and the action is performed on the arguments instead of on the operands.
==========
Instapaper (Instapaper)
- Highlight Loc. 442-44  | Added on Wednesday, June 22, 2011, 12:51 PM

Douglas McIlroy, at the 1969 Extensible Languages Symposium, described opposing philosophies of programming language design as “anarchist” and “fascist”. 
==========
Instapaper (Instapaper)
- Highlight Loc. 497-500  | Added on Wednesday, June 22, 2011, 12:55 PM

In order to evaluate the operands in any environment at all, you typically use eval — and eval requires an explicit second argument specifying the environment in which to do the evaluation.  And the most immediately available environment that can be specified is the one for which a local binding has been explicitly provided:  the dynamic environment of the call.
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 670  | Added on Wednesday, June 22, 2011, 10:51 PM

extempore,
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 712  | Added on Wednesday, June 22, 2011, 10:56 PM

Eritis sicut Deus, scientes bonum et malum.
==========
Instapaper (Instapaper)
- Highlight Loc. 1080-81  | Added on Thursday, June 23, 2011, 07:14 AM

 Emacs is _not_ the "press the TAB key to move the cursor to next tab stop" type of software.
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 790  | Added on Thursday, June 23, 2011, 10:57 PM

gimlet
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 178  | Added on Friday, June 24, 2011, 07:03 AM

The system can’t enforce truth, only consistency.
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 179  | Added on Friday, June 24, 2011, 07:04 AM

No update operation must ever cause any database constraint to evaluate to FALSE. Observeinparticularthat,inaccordancewithmypositionthatallintegritycheckingmust be immediate, the rule talks in terms of update operations, not transactions
==========
Instapaper (Instapaper)
- Highlight Loc. 29-30  | Added on Friday, June 24, 2011, 10:29 AM

Bernard Shaw’s play Pygmalion who learns to speak in an upper-class diction in spite of her origins.
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 101  | Added on Sunday, June 26, 2011, 09:19 AM

antinomian. 
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 131-33  | Added on Sunday, June 26, 2011, 09:25 AM

To regret one’s own experiences is to arrest one’s own development.  To deny one’s own experiences is to put a lie into the lips of one’s own life.  It is no less than a denial of the soul.
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 170-71  | Added on Sunday, June 26, 2011, 09:33 AM

Dante places low in the Inferno those who wilfully live in sadness;
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 273  | Added on Sunday, June 26, 2011, 09:52 AM

the artistic life is simply self-development. 
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 289  | Added on Sunday, June 26, 2011, 09:55 AM

Matthew Arnold
==========
De Profundis (Oscar Wilde)
- Highlight Loc. 383-84  | Added on Monday, June 27, 2011, 11:28 PM

The two most deeply suggestive figures of Greek Mythology were, for religion, Demeter, an Earth Goddess, not one of the Olympians, and for art, Dionysus, the son of a mortal woman to whom the moment of his birth had proved also the moment of her death.
==========
Instapaper (Instapaper)
- Highlight Loc. 2006-8  | Added on Thursday, June 30, 2011, 10:12 PM

A related phenomenon commonly seen with software is bike-shedding, where interlocutors focus on surface details like naming and syntax… or (come to think of it) like lock combinations.
==========
Instapaper (Instapaper)
- Highlight Loc. 2008-9  | Added on Thursday, June 30, 2011, 10:13 PM

On the other hand, software is easier than quantum physics, and the population of people able to make substantial suggestions about software systems is several orders of magnitude bigger than Feynman’s circle of colleagues.
==========
Instapaper (Instapaper)
- Highlight Loc. 34-37  | Added on Saturday, July 02, 2011, 09:51 AM

Teaching Company’s website for guidance. Here are a few I’ve personally listened to and enjoyed: Famous Greeks Famous Romans Books That Have Made History: Books That Can Change Your Life
==========
Instapaper (Instapaper)
- Highlight Loc. 87  | Added on Saturday, July 02, 2011, 10:01 AM

The Prince by Niccolo Machiavelli
==========
Instapaper (Instapaper)
- Highlight Loc. 108  | Added on Saturday, July 02, 2011, 10:03 AM

Brothers Karamazov by Fyodor Dostoevsky
==========
Instapaper (Instapaper)
- Highlight Loc. 123  | Added on Saturday, July 02, 2011, 10:03 AM

For Whom the Bell Tolls by Ernest Hemingway
==========
Instapaper (Instapaper)
- Highlight Loc. 154  | Added on Saturday, July 02, 2011, 10:05 AM

The Rise of Theodore Roosevelt by Edmund Morris
==========
Instapaper (Instapaper)
- Highlight Loc. 520-22  | Added on Friday, July 30, 2010, 06:54 PM

an interpreter is a tool for constructing a new universe, with its own inescapable “laws of physics” for the language it interprets. (I got this idea from one of K. Eric Drexler and Mark S. Miller’s Agorics open systems papers).
==========
Instapaper (Instapaper)
- Highlight Loc. 851-52  | Added on Saturday, July 31, 2010, 12:44 AM

The new version of the data structure and the old version exist simultaneously, for as long as there are outstanding references to them.
==========
Four Years (W. B. Yeats)
- Highlight Loc. 150-51  | Added on Saturday, July 31, 2010, 02:40 AM

My first meeting with Oscar Wilde was an astonishment. I never before heard a man talking with perfect sentences, as if he had written them all over night with labour and yet all spontaneous.
==========
Four Years (W. B. Yeats)
- Highlight Loc. 158  | Added on Saturday, July 31, 2010, 02:41 AM

Walter Pater's 'Essays on the Renaissance:'
==========
Four Years (W. B. Yeats)
- Highlight Loc. 196  | Added on Saturday, July 31, 2010, 02:45 AM

'Decay of Lying.'
==========
Instapaper (Instapaper)
- Highlight Loc. 257-58  | Added on Sunday, July 03, 2011, 10:15 AM

“What I’ve written is Proustian in its cumulative effect, and if we eliminate detail we destroy that effect.”
==========
Instapaper (Instapaper)
- Highlight Loc. 274-75  | Added on Sunday, July 03, 2011, 10:18 AM

A. E. Hotchner is the author of “Papa Hemingway” and “Hemingway and His World.”
==========
Instapaper (Instapaper)
- Highlight Loc. 844-47  | Added on Sunday, July 03, 2011, 06:37 PM

economic libertarianism is based on the same reductionist view of human beings as rational economic actors as 19th century classical economics — a drastic over-simplification of human behaviour. Like Communism, Libertarianism is a superficially comprehensive theory of human behaviour that is based on flawed axioms and, if acted upon, would result in either failure or a hellishly unpleasant state of post-industrial feudalism.)
==========
Instapaper (Instapaper)
- Highlight Loc. 971-73  | Added on Sunday, July 03, 2011, 10:37 PM

Effective, secure, and scalable support for composing heterogeneous data models has been a desiderata on my language design efforts for many years, and heavily influenced the development of reactive demand programming. I won’t claim a panacea, but RDP will significantly ease the burden on developers when composing heterogeneous data models.
==========
Instapaper (Instapaper)
- Highlight Loc. 989-90  | Added on Sunday, July 03, 2011, 10:40 PM

Reconstructed Usenet archives, including the Wiseman collection.
==========
Instapaper (Instapaper)
- Highlight Loc. 1014-15  | Added on Sunday, July 03, 2011, 10:42 PM

There are actual TOPS-10 systems on the net you can get accounts on. They’re not easy to get into.
==========
Instapaper (Instapaper)
- Highlight Loc. 1026-28  | Added on Sunday, July 03, 2011, 10:44 PM

What Jason Scott did with textfiles.com is heroic. He’s saving away all this stuff that is completely unique, and irretrievable otherwise.
==========
Instapaper (Instapaper)
- Highlight Loc. 1304-6  | Added on Sunday, July 03, 2011, 10:54 PM

Whatever the form of the aforementioned type information, you depend on it to compile your code - you cannot compile without it. In some languages, this introduces ordering dependencies among compilation units.
==========
Instapaper (Instapaper)
- Highlight Loc. 1315  | Added on Sunday, July 03, 2011, 10:55 PM

inference only works well within a module (if that).
==========
Instapaper (Instapaper)
- Highlight Loc. 1315-17  | Added on Sunday, July 03, 2011, 10:55 PM

If you rely on inference at module boundaries, your module leaks implementation information. Why? Because if you infer types from your implementation, those types may vary when you modify your implementation. That is why, even in ML, signatures are declared explicitly.
==========
Four Years (W. B. Yeats)
- Highlight Loc. 632  | Added on Monday, July 04, 2011, 05:58 PM

'That men were born bad but women made themselves so,'
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1218  | Added on Tuesday, July 05, 2011, 05:05 PM

insipidest
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1263  | Added on Tuesday, July 05, 2011, 10:40 PM

catechized
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1267  | Added on Tuesday, July 05, 2011, 10:42 PM

physiognomy,
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1282  | Added on Tuesday, July 05, 2011, 10:43 PM

bewailing,
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1298  | Added on Tuesday, July 05, 2011, 10:44 PM

braggadocios
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1323  | Added on Tuesday, July 05, 2011, 10:47 PM

churl!
==========
Faust; a Tragedy, Translated from the German of Goethe (Johann Wolfgang von Goethe)
- Highlight Loc. 1526-27  | Added on Tuesday, July 05, 2011, 11:07 PM

Curious traveller. Tell me who is that stiff man? With what stiff step he travels! He noses out whate'er he can. "He scents the Jesuit devils."
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 191  | Added on Saturday, July 09, 2011, 09:28 AM

relational closure property. Closure implies among other things that wherever we’re allowed to have the name of something—for example, in a query— wecanalwayshaveamoregeneralexpressionthatevaluatestoathingoftheappropriate type.*IntheFROMclause,forexample,wecanhaveanSQLtablename;thuswecanalso haveamoregeneralSQLtableexpression,
==========
Instapaper (Instapaper)
- Highlight Loc. 189-91  | Added on Sunday, July 10, 2011, 12:15 PM

Scala does local type inference, which follows from the desire to have separate compilation, and the fact that types serve as (mandatory) documentation at “module boundaries” (i.e., method signatures). You shouldn’t infer them, just like we don’t infer scaladoc.
==========
Instapaper (Instapaper)
- Highlight Loc. 1131-33  | Added on Saturday, July 23, 2011, 03:41 PM

“Success” is all too often assumed to be the indicator of the value of a man. But success, in and of itself, merely speaks to a particular status and may have nothing to do with the journey that the man took to get there, or whether or not he retained his integrity along the way.
==========
Instapaper (Instapaper)
- Highlight Loc. 333-34  | Added on Saturday, August 06, 2011, 05:35 PM

switched to an email program that is now over twenty years old: nmh.
==========
Instapaper (Instapaper)
- Highlight Loc. 447  | Added on Saturday, August 06, 2011, 08:19 PM

a story about Mestre Bimba—the originator of modern Capoeira from
==========
Instapaper (Instapaper)
- Highlight Loc. 454-56  | Added on Saturday, August 06, 2011, 08:19 PM

“A master wastes no energy. Every motion is precious.” A master makes everything look effortless. Nothing is frustrating or difficult for them because they do nothing that isn’t necessary. The master’s actions are pure and elegant.
==========
Instapaper (Instapaper)
- Highlight Loc. 86-88  | Added on Sunday, August 07, 2011, 09:55 AM

the Doomsday Engine (or jDoom), an open-source engine founded by Jaakko Keränen in 1999. It updates the Doom engine two generations forward, featuring smooth OpenGL performance, colored lighting and softened object glow
==========
Oreilly.SQL.and.Relational.Theory.Jan.2009 
- Highlight Page 199  | Added on Sunday, August 07, 2011, 10:17 AM

physicaldataindependencemeanswecanchange the way the data is physically stored and accessed without having to make corresponding changes in the way the data is perceived by the user. Reasonably enough, therefore, logical data independence means we can change the way the data is logically stored and accessed without having to make corresponding changes in the way the data is perceived by the user. And it’s views that are supposed to provide that logical data independence
==========
Instapaper (Instapaper)
- Highlight Loc. 1922-26  | Added on Sunday, August 07, 2011, 04:08 PM

The Kilim library for Java provides a fast zero-copy messaging system for Java which still enables mutable state. In Kilim, when one actor sends a message, it loses visibility of the object it sends, and it becomes the responsibility of the recipient. If both actors need a copy of the message, the sender can make a copy of an object before it’s sent to the recipient. Again, Erlang doesn’t provide zero-copy (except for binaries) so Kilim’s worst case is actually Erlang’s best case.
==========
Instapaper (Instapaper)
- Highlight Loc. 1961  | Added on Sunday, August 07, 2011, 04:11 PM

Query List Comprehensions (QLC).
==========
Instapaper (Instapaper)
- Highlight Loc. 24  | Added on Tuesday, August 09, 2011, 08:36 PM

you cannot achieve 'simplicity' without knowing your problem or requirements very precisely.
==========
Instapaper (Instapaper)
- Highlight Loc. 56-57  | Added on Tuesday, August 09, 2011, 08:39 PM

we write code in the context of a framework, and the constraints imposed on us help with integration.
==========
Instapaper (Instapaper)
- Highlight Loc. 736-37  | Added on Tuesday, August 16, 2011, 09:35 PM

AMD’s upcoming “Cray on a Chip”.
==========
Instapaper (Instapaper)
- Highlight Loc. 745-46  | Added on Tuesday, August 16, 2011, 09:36 PM

Tutorial: Metacompilers Part 1, about META II, the one Alan Kay and the other VPRI folks always talk about.
==========
Instapaper (Instapaper)
- Highlight Loc. 399-401  | Added on Saturday, August 27, 2011, 07:31 AM

scripting language for UNIX, aiming to blend the ease of use of the UNIX shell with the power and flexibility of a system programming language like C. Perl quickly became the language of choice for UNIX system administrators.
==========
Instapaper (Instapaper)
- Highlight Loc. 411-12  | Added on Saturday, August 27, 2011, 07:32 AM

Perl’s unparalleled ability to process text, using powerful features like regular expressions.
==========
Instapaper (Instapaper)
- Highlight Loc. 455-56  | Added on Saturday, August 27, 2011, 07:35 AM

How much did a programmer make an hour when FORTRAN was on the ascendant? How much did memory cost then? How about now? Times have changed. Memory is cheap; programmers are expensive!
==========
Instapaper (Instapaper)
- Highlight Loc. 485-87  | Added on Saturday, August 27, 2011, 07:37 AM

The interest and emphasis is now on “information” not “data.” It is clear there is more interest in information, which typically includes a mix of text and numeric data, rather than just data.
==========
Instapaper (Instapaper)
- Highlight Loc. 542-43  | Added on Saturday, August 27, 2011, 07:40 AM

The multitasking model that Perl has historically supported is “fork” and “wait.” The granularity is the process. The flavor is UNIX.
==========
Instapaper (Instapaper)
- Highlight Loc. 681-82  | Added on Saturday, August 27, 2011, 07:41 AM

Doug McIlroy summarized the Unix philosophy as follows. This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.
==========
Instapaper (Instapaper)
- Highlight Loc. 686-87  | Added on Saturday, August 27, 2011, 07:42 AM

The hard part isn’t writing little programs that do one thing well. The hard part is combining little programs to solve bigger problems. 
==========
Instapaper (Instapaper)
- Highlight Loc. 684-85  | Added on Saturday, August 27, 2011, 07:42 AM

In practice, programs gain overlapping features over time.  A set of programs may start out orthogonal but lose their uniqueness as they evolve.
==========
Instapaper (Instapaper)
- Highlight Loc. 688-89  | Added on Saturday, August 27, 2011, 07:43 AM

Piping the output of a simple shell command to another shell command is easy. But as tasks become more complex, more and more work goes into preparing the output of one program to be the input of the next program.
==========
Instapaper (Instapaper)
- Highlight Loc. 1194-95  | Added on Saturday, August 27, 2011, 12:30 PM

and was reminded that Smalltalk doesn’t have built-in conditionals. Instead, they use method calls (aka message sends) to do the heavy lifting:
==========
Instapaper (Instapaper)
- Highlight Loc. 1203-4  | Added on Saturday, August 27, 2011, 12:31 PM

In Ruby, unlike Smalltalk, message sends use a “.“, so we need to use periods between the message sends to link them together. With that exception, the semantics of the two languages are roughly identical.
==========
Instapaper (Instapaper)
- Highlight Loc. 1236-37  | Added on Saturday, August 27, 2011, 12:33 PM

Rubinius, for instance, has used Squeak Smalltalk as a model for implementing their VM, and GemStone’s Maglev is built right on top of a Smalltalk VM.
==========
Instapaper (Instapaper)
- Highlight Loc. 1244-45  | Added on Saturday, August 27, 2011, 12:34 PM

Smalltalk has also managed to avoid the many variants of Lambdas, Procs and Blocks in Ruby,
==========
Instapaper (Instapaper)
- Highlight Loc. 1255-56  | Added on Saturday, August 27, 2011, 12:35 PM

Smalltalk’s IDEs,  on the other hand, are written in Smalltalk.
==========
Instapaper (Instapaper)
- Highlight Loc. 1276-77  | Added on Saturday, August 27, 2011, 12:36 PM

InfoQ: Ruby 1.9 added Fibers - a construct which can also be used as symmetric coroutine. Some Smalltalk versions also use these instead of exposing heavyweight kernel threads
==========
Instapaper (Instapaper)
- Highlight Loc. 1279  | Added on Saturday, August 27, 2011, 12:36 PM

In Unix, thread is spelled “f o r k” for a reason. I think sharing should be opt-in, rather than opt-out,
==========
Instapaper (Instapaper)
- Highlight Loc. 1296-97  | Added on Saturday, August 27, 2011, 12:38 PM

I still use Perl for command-line scripting. Smalltalk doesn’t lend itself to small programs very well.
==========
Instapaper (Instapaper)
- Highlight Loc. 1298  | Added on Saturday, August 27, 2011, 12:39 PM

(Monkey Patching)? Have you used Squeak’s Traits?
==========
Instapaper (Instapaper)
- Highlight Loc. 1317-18  | Added on Saturday, August 27, 2011, 12:40 PM

Not image-based. Which means it uses files which means anybody can use their favourite editor to type up hello world and get going.
==========
Instapaper (Instapaper)
- Highlight Loc. 1321-25  | Added on Saturday, August 27, 2011, 12:42 PM

First because dealing with an image means you’re dealing with live objects, right here and now, and not an indirection. Second because dealing directly with objects which are all precompiled unshackles you from the edit-compile cycle. Third because tools built specifically to deal with code (eg, the RefactoringBrowser) are vastly superior to “your favourite editor” or “normal tools”. Fourth because version control is much more sophisticated in image-based systems, like all code-handling
==========
Instapaper (Instapaper)
- Highlight Loc. 1336-41  | Added on Saturday, August 27, 2011, 12:44 PM

version control: Envy uses a per method version control database that keeps track of all your changes at a per method basis. It also allows you to close a class from further changes and thus “releasing” it to the rest of your team. Integration developers can then pick and chose from the class database to select what version of the app to use. The UI is very slick and programmable. By comparison, filebased tools like subversion require you to do odd things like “branch” to work on concurrent versions of things and have a real file-based mentality to them. Envy knows about classes, methods, and “applications” and can help you build an app from several parts quite powerfully and easily.
==========
Instapaper (Instapaper)
- Highlight Loc. 1353-54  | Added on Saturday, August 27, 2011, 12:46 PM

Arithmetic precedence is incompatible with ST because ST precedence is based entirely on associative (partial) ordering.
==========
Instapaper (Instapaper)
- Highlight Loc. 1359-61  | Added on Saturday, August 27, 2011, 12:47 PM

Smalltalk’s designers did such a good job because they conceived of Smalltalk as a complete self-contained system. Whatever rules they came up with, they knew would apply everywhere, and they knew that no other rules would be relevant. Smalltalk is Everything.
==========
Instapaper (Instapaper)
- Highlight Loc. 1379-94  | Added on Saturday, August 27, 2011, 12:51 PM

Rails does not eat SeasideFramework alive, quite the contrary. Both are excellent frameworks, rails takes the traditional web architecture, makes it slick and integrated as hell, a joy to use in comparison to configuration heavy Java and .Net framworks, it is however, still the traditional request/response/stateless/html template/database web architecture. Seaside however, is an entirely different beast. First of all, it only deals with the web side of the framework, persistence is entirely up to you, object databases are most common, because they pretty much rule the roost in the Smalltalk world. Keep in mind, you don’t even need a database at all to build a Seaside application, because the Smalltalk image itself “is” a non transactional object database, so you prototype the entire application on live objects. Seaside has no html templates, it’s a control based framework where pages are, and are composed of live controls. Smalltalk’s syntax is fully capable of expressing html directly, thus no templates, you write your html in Smalltalk, allowing you the full expressive power of the language without having to weave it into html. There are no request response state issues, the entire request response cycle is hidden with the magic of continuations, your objects, pages, controls, all are written in standard OO style, as if you were writing a desktop application rather than a web application. Pages, which are just controls, can call and answer to each other and pass real objects back and forth between them, making Seaside far more capable of writing extremely complex applications than Rails with much less effort. The simple example is a multi step check out process, a shopping cart for example, Seaside allows then entire process to be written as a single routine, rather than spread out across multiple pages passing state back and forth. That’s the magic of WebTransactionsWithContinuations. Rails
==========
Instapaper (Instapaper)
- Highlight Loc. 1441-43  | Added on Saturday, August 27, 2011, 12:54 PM

Except they are different. Id est traits try to remove the warts of mixins by 1) prohibiting internal state variables, 2) in the case of multiple mixins, providing a syntax to allow programmer’s to choose which method to mixin,
==========
Instapaper (Instapaper)
- Highlight Loc. 1709  | Added on Saturday, August 27, 2011, 12:57 PM

Without real metastructures.
==========
Instapaper (Instapaper)
- Highlight Loc. 1711  | Added on Saturday, August 27, 2011, 12:58 PM

Without restartable exceptions.
==========
Instapaper (Instapaper)
- Highlight Loc. 1711-48  | Added on Saturday, August 27, 2011, 01:00 PM

Without any mechanism to extend or enhance operators. Without any dynamic high quality run-time debugging support. Without a convenient syntax for literal arrays. Without a way to retroactively add methods to classes. Some of those are considered to be advantages: Java is certainly much less “reinvention of the world”. However, Smalltalk doesn’t have hierarchical namespaces. Some of us view this as a Smalltalk feature *smile* — TomStambaugh I agree wholeheartedly. I’ve been doing some pretty namespace-intensive stuff in VisualWorks 5i for the last month or so, and, frankly, I don’t see the big win. Namespaces (in Smalltalk) add lots of complexity for not much payoff. — AnthonyLander I would disagree about hierarchical naming through packages being a “bug” in Java as defined by Gosling by 1995 (the fair comparison with various Smalltalks should perhaps be around that timestamp, given that Smalltalk had a twenty year start). How else should class name clashes be avoided when composing stuff from multiple sources, including when downloading applets and loading servlet classes at runtime? Which reminds me, what about standards for loading new classes into virtual machines from separate suppliers? How’s Smalltalk doing at that these days? It worked well in 1995 for Java. Plus, what’s the comparative verdict on interfaces, threads and the monitor-based concurrency model Gosling may have copied from ModulaThree or Tony Hoare ( CarHoare )? — RichardDrake The only problem is that he chose the wrong Hoare paper! :) Java really should have used CommunicatingSequentialProcesses , a more recent Hoare paper that solved many of the problems associated with monitors. Happily, there are various Java implementations of CommunicatingSequentialProcesses . — RobertDiFalcoI wouldn’t deny that. But the comparison with Smalltalk computes to what? Good point. — RobertDiFalco On to interfaces, I think they are one of the most elegant solutions to the diamond multiple inheritance problem I have seen yet — much better than SmallTalk in this regard. I’m very happy with Java interfaces and how inheritance works. I know some would like true multiple inheritance, but I think this would open pandora’s box. Multiple interface inheritance slays the diamond problem perfectly. While effective, I think the C++ solution (virtual inheritance) is just plain ugly. — RobertDiFalco Are you aware of the EiffelLanguage approach? The compiler must work harder but it seems painless for programmers. It looks like MI of implementation is one of the things which Microsoft’s new system doesn’t support directly, so if they have their way we are stuck without it. Eg it’s one of the few differences between EiffelSharp ? and EiffelLanguage . — DaveHarris Dave, yeah. EiffelLanguage has an interesting approach. Of course, they also have CoVariance which is so great in so many ways. I would even be happy for return-type CoVariance in JavaLanguage or CeePlusPlus . This is one area where the no compile-time types of SmallTalk really shine — the whole covariance/contravariance issue is side-stepped. I also prefer EiffelLanguage ’s approach to genericity over CeePlusPlus templates. I think GenericJava is a good middle ground for JavaLanguage . — RobertDiFalco Robert, CeePlusPlus already has covariant return types (unless you’re using Visual C++ 6 or worse) and has had for years. It’s not vital in C++ (there are ways to get the same effect without it by combining non-virtual methods and virtual methods) but it would be useful in Java (where it can’t be simulated sensibly). — JamesDennett
==========
Instapaper (Instapaper)
- Highlight Loc. 1748-50  | Added on Saturday, August 27, 2011, 01:00 PM

Are you aware of delegation in SelfLanguage as an alternative to inheritance? Yes. The relationship between delegation and inheritance has been explored at great length, both in the literature and here.
==========
Instapaper (Instapaper)
- Highlight Loc. 1777-83  | Added on Saturday, August 27, 2011, 01:32 PM

I’m talking about fork(2), execve(2), pipe(2), socketpair(2), select(2), kill(2), sigaction(2), and so on and so forth. These are our friends. They want so badly just to help us.
==========
Instapaper (Instapaper)
- Highlight Loc. 1787-88  | Added on Saturday, August 27, 2011, 01:32 PM

only the Perl people seem to regularly (and happily) apply common Unix idioms to a wide range of problem areas.
==========
Instapaper (Instapaper)
- Highlight Loc. 1788  | Added on Saturday, August 27, 2011, 01:33 PM

Unix is not one of the “perlisms” Ruby should be trying to distance itself from. Perl got that part right.
==========
Instapaper (Instapaper)
- Highlight Loc. 1846-48  | Added on Saturday, August 27, 2011, 06:35 PM

Instead of a blocking accept(2), Unicorn uses a blocking select(2) with an error pipe and a timeout so that it can bust out and do some other basic housekeeping, like reopening logs, processing signals, and maintaining a heartbeat with the master process.
==========
Instapaper (Instapaper)
- Highlight Loc. 363-64  | Added on Saturday, August 27, 2011, 06:55 PM

to A Nanopass Framework for Compiler Education [PDF] by Sarkar, Waddell, and Dybvig.
==========
Instapaper (Instapaper)
- Highlight Loc. 599-601  | Added on Saturday, August 27, 2011, 07:09 PM

A source code element modifies the language in which it occurs.  Starting, say, with standard Java, one introduces a new class, and ends up with a different programming language — almost exactly like standard Java, but not quite because it now has this additional class in it.  That is abstraction, building a new language on top of an old one.
==========
Instapaper (Instapaper)
- Highlight Loc. 608-9  | Added on Saturday, August 27, 2011, 07:10 PM

An abstractively powerful programming language is, by my reckoning, a language from which one can abstract to a wide variety of other languages. 
==========
Instapaper (Instapaper)
- Highlight Loc. 619-21  | Added on Saturday, August 27, 2011, 07:29 PM

Lisp has been described as a language with no syntax.  There is a sense in which that’s true:  if by “syntax” one means “syntax for representing programs rather than data”. 
==========
Instapaper (Instapaper)
- Highlight Loc. 625-27  | Added on Saturday, August 27, 2011, 07:30 PM

I believe, by the way, this is how Lisp should be taught to novices:  Teach them S-expression syntax first, set it firmly in their minds that such expressions are data, and only after that begin to teach them about evaluation. 
==========
Instapaper (Instapaper)
- Highlight Loc. 635-36  | Added on Saturday, August 27, 2011, 07:32 PM

The more power Lisp gives the programmer to control how syntax will be interpreted, the more abstractive power accrues. 
==========
Instapaper (Instapaper)
- Highlight Loc. 646-48  | Added on Saturday, August 27, 2011, 07:48 PM

This goes back to the “basic irrelevance of syntax” remark.  At heart, parametric polymorphism is semantic, ad hoc is syntactic; one might be tempted to call them “semantic polymorphism” and “syntactic polymorphism”, or even “good polymorphism” and “bad polymorphism”. 
==========
Instapaper (Instapaper)
- Highlight Loc. 793-95  | Added on Saturday, August 27, 2011, 10:02 PM

Evans and Sutherland explaining computer hardware; Fano and Corbato on operating systems; Tony Oettinger describing his natural language parser; and the two giants of my own subfield (Artificial Intelligence), McCarthy and Minsky, on Information Theory and AI.
==========
Instapaper (Instapaper)
- Highlight Loc. 796-99  | Added on Saturday, August 27, 2011, 10:41 PM

issue:  Christopher Strachey‘s contribution on “System Analysis and Programming.”
==========
Instapaper (Instapaper)
- Highlight Loc. 844-46  | Added on Saturday, August 27, 2011, 10:47 PM

checkers involves positions, moves and the values associated with them. Strachey the programmer then implements a nice representation of a board position as a  four-tuple of elements: the player whose turn it is, the locations of that player’s pieces, the locations of the opponent’s pieces and the locations of the kings.
==========
Instapaper (Instapaper)
- Highlight Loc. 1532-33  | Added on Sunday, August 28, 2011, 07:40 AM

“Who goes there?” Get it, ’cause that’s the title of the story that THE THING was based on. But
==========
Instapaper (Instapaper)
- Highlight Loc. 24-25  | Added on Saturday, September 03, 2011, 09:59 PM

with democratic political systems that there is more to be gained by ‘making a point’ then solving the problem.
==========
Instapaper (Instapaper)
- Highlight Loc. 251-54  | Added on Sunday, September 04, 2011, 08:16 AM

Both in VisualWorks and Squeak, when a Block is invoked with a wrong number of arguments, message processing ends with a primitive failure in the valueWithArguments: method. The standard Smalltalk response to that is to complain about the wrong number of arguments. All we need is change that response to curry the receiver when appropriate.
==========
Instapaper (Instapaper)
- Highlight Loc. 307-8  | Added on Sunday, September 04, 2011, 08:21 AM

Insisting that objects communicate exclusively via message sends rules out aberrations such as static methods, non-virtual methods, constructors and public fields.
==========
Instapaper (Instapaper)
- Highlight Loc. 316-19  | Added on Sunday, September 04, 2011, 08:22 AM

We can nevertheless ask: is Smalltalk a message based programming language? I think not. I would take message-based programming to have an even stronger requirement: all computation is done via message passing. That includes the computation done within a single object as well. Whereas Smalltalk objects can access variables and assign them, message based programming would require that an object use messages internally as well. This is exactly what happens in Self,
==========
Instapaper (Instapaper)
- Highlight Loc. 321-23  | Added on Sunday, September 04, 2011, 08:25 AM

I like the term Message-based Programming (MBP). It implies a lot of valuable design decisions I strongly believe in, while leaving many design alternatives open. The term is, I hope, free of the baggage that is associated with object oriented programming, which has too many flawed interpretations.
==========
Instapaper (Instapaper)
- Highlight Loc. 456-57  | Added on Sunday, September 04, 2011, 08:31 AM

the original Smalltalk was in fact the operating system of the computer.
==========
Instapaper (Instapaper)
- Highlight Loc. 506-8  | Added on Sunday, September 04, 2011, 08:36 AM

Engelbart and Kay both have complained about how computers have been applied towards automating “what we already do”. Both of them see computers instead as “mind amplifiers”, augmenting our intelligence.
==========
Instapaper (Instapaper)
- Highlight Loc. 1571-72  | Added on Sunday, September 04, 2011, 09:12 AM

we process text strings a lot. So I tried to work hard on text processing, namely the string class and regular expressions. Regular expressions are built into the language and are very tuned up for use. We also need to call into the operating system a lot.
==========
Instapaper (Instapaper)
- Highlight Loc. 24  | Added on Sunday, September 04, 2011, 09:30 AM

For most people software is a solid edifice - it presents a few modes of interaction to the user,
==========
Instapaper (Instapaper)
- Highlight Loc. 31-33  | Added on Sunday, September 04, 2011, 09:31 AM

an integral part of the Xerox PARC Philosophy was to dismantle the wall between software developers and computer users, to develop systems so easy to program that doing so would be a natural, simple aspect of computer use.
==========
Instapaper (Instapaper)
- Highlight Loc. 431-33  | Added on Sunday, September 04, 2011, 09:41 AM

The call to chain do ... end creates a new Chain object with the block passed in to the constructor. Chain is kind of “blank slate”: all methods inherited from Object are undefined so that any messages it receives go through method missing.
==========
Instapaper (Instapaper)
- Highlight Loc. 434-35  | Added on Sunday, September 04, 2011, 09:42 AM

Method missing has two cases. It either dynamically defines a method returning a new link in the Chain (in the case of nested chaining), or it delegates the method back to the object that constructed the chain in the first place.
==========
Instapaper (Instapaper)
- Highlight Loc. 452  | Added on Sunday, September 04, 2011, 09:51 AM

Ruby permits adding methods to individual objects; in Smalltalk, all methods reside in classes.
==========
Instapaper (Instapaper)
- Highlight Loc. 452-53  | Added on Sunday, September 04, 2011, 09:51 AM

In Ruby, it is practical and somewhat useful to add methods dynamically; in Smalltalk, the practice is generally to treat the methods and classes as static.
==========
Instapaper (Instapaper)
- Highlight Loc. 464-66  | Added on Sunday, September 04, 2011, 09:53 AM

[foo, *bar] = bletch where “=” is the assignment notation (discussed below) and bletch is an array of at least one element. Then foo will be set to the first element, and bar will be set to the rest. This example emulates Joy’s “snoc” operator (cons spelled backward).
==========
Instapaper (Instapaper)
- Highlight Loc. 478-79  | Added on Sunday, September 04, 2011, 09:55 AM

if you are passing around many constructed dictionaries, which in Web development, for example, tends to be done quite a bit.
==========
Instapaper (Instapaper)
- Highlight Loc. 493-94  | Added on Sunday, September 04, 2011, 09:56 AM

The general attitude difference seems to prevail, that in Ruby it’s more, write what you mean, and leave efficiency to the language (or library) implementation.
==========
Instapaper (Instapaper)
- Highlight Loc. 503-4  | Added on Sunday, September 04, 2011, 09:57 AM

Ruby offers convenient translations of assignment syntax into message calls. Smalltalk: “foo at: x put: y”. Ruby: “foo[x] = y”. You write what you mean, not how it is implemented.
==========
Instapaper (Instapaper)
- Highlight Loc. 520-22  | Added on Sunday, September 04, 2011, 10:10 AM

In the Smalltalk example on the other hand, the selector is “cueMenuRoleNamed:forPage:andLayout:”. The selector embodies the selection of available input data, so the method that implements it only has to deal with that case.
==========
Instapaper (Instapaper)
- Highlight Loc. 525-28  | Added on Sunday, September 04, 2011, 10:11 AM

So, in looking at keywordism as a whole as addressed in the two languages, I see some strength in Smalltalk in that the keywords are part of the selector, and that the use of keywords with message arguments right at the point where you want to trigger the dispatch is syntactically simple and easy. I see as weaknesses in Smalltalk that the order matters, and that it is not so easy to package up the collection of keyword-argument pairs as a message that can be treated as a whole.
==========
Instapaper (Instapaper)
- Highlight Loc. 540-43  | Added on Sunday, September 04, 2011, 10:13 AM

In Ruby (as in the language Self, the pioneer in this regard, and from which the language Self gets its name), you can usually abbreviate message calls on “self” by omitting the mention of “self”. For example, for “self.foo” you can write simply “foo”. But in Smalltalk, you cannot abbreviate “self foo” by writing simply “foo”. This makes a major economy in writing and reading Ruby code.
==========
Instapaper (Instapaper)
- Highlight Loc. 554-55  | Added on Sunday, September 04, 2011, 10:15 AM

Smalltalk’s treatment of blocks is plenty economical, whether they are being passed as arguments right at the point of construction or not. I
==========
Instapaper (Instapaper)
- Highlight Loc. 555-57  | Added on Sunday, September 04, 2011, 10:16 AM

guess I can see why this exceptionalism arose; it avoids having the closing parenthesis of the argument list coming right after the end of a block, which I can see would look ugly. But, so much twisting and turning and squirming for a tiny increment of beauty.
==========
Instapaper (Instapaper)
- Highlight Loc. 565-69  | Added on Sunday, September 04, 2011, 10:17 AM

Smalltalk’s syntax includes no control constructs except the “^” (early return). Any kind of “if”, “while”, etc., are made by message calls using blocks. At least, syntactically they appear that way. As the Self designers point out, in reality you can’t override ifTrue:ifFalse: unless the Smalltalk compiler resorts to the sophistication characteristic of the Self compiler. If you could, many programs would run too slowly because they are laced with much conditional code.
==========
Instapaper (Instapaper)
- Highlight Loc. 575-76  | Added on Sunday, September 04, 2011, 10:18 AM

in Smalltalk, if you don’t explicitly write “^” with an expression (which means, return the value of the expression as the result of the call), a Smalltalk method returns “self”
==========
Instapaper (Instapaper)
- Highlight Loc. 592-93  | Added on Sunday, September 04, 2011, 10:21 AM

Smalltalk requires declaration of all local variables and instance variables. In Ruby, you introduce both simply by usage;
==========
Instapaper (Instapaper)
- Highlight Loc. 594-95  | Added on Sunday, September 04, 2011, 10:21 AM

Ruby absolutely makes the wrong choice by denying the programmers any way, just in the syntax in a block of code as you could observe without looking outside the block,
==========
Instapaper (Instapaper)
- Highlight Loc. 619  | Added on Sunday, September 04, 2011, 10:24 AM

Ruby practices depend on the file system as the repository for the software; Smalltalkers use the image.
==========
Instapaper (Instapaper)
- Highlight Loc. 621-22  | Added on Sunday, September 04, 2011, 10:25 AM

Smalltalkers look at their code through the class browser. The source code seems to live in the environment along with the values of variables, etc. The practice with Ruby is to organize the code in a file system.
==========
Instapaper (Instapaper)
- Highlight Loc. 675-78  | Added on Sunday, September 04, 2011, 10:28 AM

A final distinctive feature in CLU is multiple assignment, where more than one variable can appear on the left hand side of an assignment operator. For instance, writing x,y = y,x would exchange values of x and y. In the same way, functions could return several values, like x,y,z = f(t).
==========
Instapaper (Instapaper)
- Highlight Loc. 947-49  | Added on Sunday, September 04, 2011, 10:36 AM

Manfred von Thun: Whereas all other [note: should be ‘most other’] functional programming languages are based on the application of functions to arguments, Joy is based on the composition of functions. All such functions take a stack as argument and produce a stack as value.
==========
Instapaper (Instapaper)
- Highlight Loc. 971-78  | Added on Sunday, September 04, 2011, 05:44 PM

(define (a) 1) (define (alpha) (a)) (alpha)             ;  1 (define (a) -1) (alpha)             ; -1 (define-syntax b (syntax-rules () ((_) 2))) (define (beta) (b)) (beta)              ;  2 (define-syntax b (syntax-rules () ((_) -2))) (beta)              ;  2 still! The function being applied, a, in the first half of the code above, is dynamically determined when the application occurs. A redefinition of a means that calling alpha will reflect that change. Dynamic languages. Late binding. Yay! In the second half of the code above, the special form, b, is determined and expanded when beta is first defined and redefining b has no affect on later calls to beta.
==========
Instapaper (Instapaper)
- Highlight Loc. 994-95  | Added on Sunday, September 04, 2011, 05:46 PM

person describing the 1802 as having 32 bytes of RAM and 65535 I/O ports.
==========
Instapaper (Instapaper)
- Highlight Loc. 27-28  | Added on Sunday, September 04, 2011, 06:22 PM

John Lloyd, Theorem 9.6 in ‘Foundations of Logic Programming’ for a proof that pure Horn clause logic is Turing-equivalent. Qi sequent calculus can represent any pure Horn clause program.
==========
Instapaper (Instapaper)
- Highlight Loc. 34-35  | Added on Sunday, September 04, 2011, 06:22 PM

Qi is still very ‘powerful’ type-theoretically, since Gentzen’s notation has been with us for 60 years and I don’t see a better one. But it is perfectly possible someone will claim they have a more compact notation than sequent calculus.
==========
Instapaper (Instapaper)
- Highlight Loc. 1677-79  | Added on Sunday, September 04, 2011, 06:41 PM

Although Design by Contract and assertions are very closely related, DbC is more than just slapping a few assertions into your code at strategic locations. It is about identifying the contract under which your code will execute and you expect all clients to adhere to. It is about clearly defining responsibilities between client software and supplier software.
==========
Instapaper (Instapaper)
- Highlight Loc. 1683-85  | Added on Sunday, September 04, 2011, 06:42 PM

By identifying the contract, we are clearly identifying the responsibilities of each party in a collaboration. Knowing responsibilities is a big help when the time comes to get two (or more) modules to work together. Precondition violations mean that the client is in error. Postcondition violations mean that the supplier is incorrect.
==========
Instapaper (Instapaper)
- Highlight Loc. 1688  | Added on Sunday, September 04, 2011, 06:43 PM

Require no more, promise no less.
==========
Instapaper (Instapaper)
- Highlight Loc. 1701-3  | Added on Sunday, September 04, 2011, 06:45 PM

Although very similar in many ways, there are still some fundamental differences between DbC assertion checking and unit testing. Unit tests generally focus on a single module (class) and don’t exercise modules (classes) in concert together. In particular, unit test are a poor vehicle for checking preconditions.
==========
Instapaper (Instapaper)
- Highlight Loc. 1706-8  | Added on Sunday, September 04, 2011, 06:48 PM

From a Design by Contract perspective, this is not testing preconditions. Preconditions define when it is legal to invoke a particular method. According to DbC, calling a method when its preconditions are not established results in undefined behavior. How can you test for undefined behavior? 
==========
Instapaper (Instapaper)
- Highlight Loc. 1737-39  | Added on Sunday, September 04, 2011, 06:51 PM

DbC postconditions are general and answer the question of how a method responds under all possible legal conditions. Unit tests focus on how a method responds under certain, specific situations specified in the test.
==========
Instapaper (Instapaper)
- Highlight Loc. 3087-90  | Added on Sunday, September 04, 2011, 07:02 PM

translates the JavaScript abstract syntax tree to a high-level static single-assignment (SSA) representation called Hydrogen, and tries to optimize that Hydrogen graph. Then the Hydrogen is translated to the machine-specific Lithium low-level language, which facilitates register allocation and, finally, code generation.
==========
Instapaper (Instapaper)
- Highlight Loc. 52-53  | Added on Wednesday, September 07, 2011, 06:24 PM

be very nice if we could design a system which gave threads the “benefit of the doubt”, assuming that they will not conflict, while still somehow maintaining data integrity.
==========
Instapaper (Instapaper)
- Highlight Loc. 93-95  | Added on Wednesday, September 07, 2011, 06:27 PM

Clojure seems to take a fair bit of inspiration from Haskell’s STM monad, although it does not port over concepts like transaction composition and what Simon Payton Jones calls “choice”. 
==========
Instapaper (Instapaper)
- Highlight Loc. 247-52  | Added on Wednesday, September 07, 2011, 06:54 PM

This is the reason we needed to redirect through retrieve rather than just grabbing the value directly in Ref.  Within a transaction, any dereferencing will polymorphically come to an instance of this class.  The mutable map, world, handles the transaction-local cache of all values once they have been accessed.  Thus, the reference can change after we have looked at it (when another transaction commits) and it doesn’t affect the values local to our transaction.  This technique is exceedingly powerful and in no small part responsible for the higher throughput made possible by the transactional model.
==========
Instapaper (Instapaper)
- Highlight Loc. 254-55  | Added on Wednesday, September 07, 2011, 06:54 PM

transactions are always designed to be single-threaded from start to finish.  They are used in multi-threaded situations, they do not use multiple threads.
==========
Instapaper (Instapaper)
- Highlight Loc. 482-85  | Added on Wednesday, September 07, 2011, 09:50 PM

macros, of which the key component is “syntax”, a kind of decorated representation of source code. If you write simple macros that don’t do anything like variable capture, you basically don’t have to worry about the distinction between syntax and datum, but when you start selectively messing up hygiene, it becomes important.
==========
Instapaper (Instapaper)
- Highlight Loc. 485-86  | Added on Wednesday, September 07, 2011, 09:51 PM

And you start to notice patterns. Specifically, you are often “unpacking” a piece of syntax, doing something to it, and then “resyntaxing” it when you are done.
==========
Instapaper (Instapaper)
- Highlight Loc. 836-37  | Added on Friday, September 09, 2011, 10:55 PM

work done on Classboxes in Smalltalk-80 and Java is a very interesting application of similar ideas to modularisation
==========
p1053-parnas (D. L. Parnas)
- Highlight Page 1  | Added on Saturday, September 10, 2011, 11:25 AM

On the Criteria To Be Used in Decomposing Systems into Modules D.L. Parnas Carnegie-Mellon University
==========
Instapaper (Instapaper)
- Highlight Loc. 178-80  | Added on Wednesday, September 14, 2011, 12:30 PM

Its somewhat funny to consider that a new generation of developers (post C++) consider the features in Ruby to be bleeding edge when in fact they are mostly retro features of things that Smalltalk has done for decades.  The challenge of course is that languages like Python and Ruby have the heat needed to create a strong momentum. 
==========
Instapaper (Instapaper)
- Highlight Loc. 312  | Added on Friday, September 16, 2011, 12:55 PM

Ruby 1.9 added Fibers - a construct which can also be used as symmetric coroutine.
==========
Instapaper (Instapaper)
- Highlight Loc. 332-33  | Added on Friday, September 16, 2011, 12:57 PM

I still use Perl for command-line scripting. Smalltalk doesn’t lend itself to small programs very well.
==========
Instapaper (Instapaper)
- Highlight Loc. 402-4  | Added on Friday, September 16, 2011, 01:00 PM

For instance, integers and fixed point numbers were exact numeric values, and would not allow rounding or truncation. Implicit conversions between types (say, between int and float) was also not allowed, and explicit conversion operations were predefined only for types for which no unreasonable loss of information would occur.
==========
Instapaper (Instapaper)
- Highlight Loc. 417-18  | Added on Friday, September 16, 2011, 01:01 PM

CLU’s greatest strength is in its support for three types of abstractions: procedural, control, and data abstractions.
==========
Instapaper (Instapaper)
- Highlight Loc. 502-3  | Added on Friday, September 16, 2011, 01:07 PM

designers of CLU have left out a major part of structuring: nesting. Nesting of procedures within procedures, clusters within clusters, or clusters within procedures is not allowed.
==========
Instapaper (Instapaper)
- Highlight Loc. 726-29  | Added on Friday, September 16, 2011, 01:13 PM

cluster that implements complex numbers:     complex_number = cluster is add, subtract, multiply, ....          rep = record [ real_part: real, imag_part: real ]          add = proc ... end add;          subtract = proc ... end subtract;          multiply = proc ... end multiply;          ...     end complex_number;
==========
Instapaper (Instapaper)
- Highlight Loc. 812-14  | Added on Friday, September 16, 2011, 01:19 PM

A lot of what people call early 1950s “macros” appear to be unconstrained text rewriting rather than expansion of an identifier. Lisp probably pioneered “semantic” macros (as opposed to text macros), but they did not exist in the early 1960s Lisp 1.5
==========
Instapaper (Instapaper)
- Highlight Loc. 203-5  | Added on Friday, September 23, 2011, 07:50 PM

The first is the fact that we had to shadow = in our package. Common Lisp forbids the redefinition of the functions, macros and special forms defined in the standard, so we have to go out of our way if we want to achieve that effect. Barry Margolin provided a rationale for this in comp.lang.lisp post.
==========
Instapaper (Instapaper)
- Highlight Loc. 431-33  | Added on Friday, September 23, 2011, 11:29 PM

The fact that this danger did not lead to a catastrophe before is no guarantee that it will not the next time, unless it is completely understood. When playing Russian roulette the fact that the first shot got off safely is little comfort for the next.
==========
Instapaper (Instapaper)
- Highlight Loc. 459  | Added on Saturday, September 24, 2011, 07:33 AM

When using a mathematical model careful attention must be given to uncertainties in the model.
==========
Instapaper (Instapaper)
- Highlight Loc. 484  | Added on Saturday, September 24, 2011, 07:37 AM

Without detailed understanding, confidence can not be attained.
==========
Instapaper (Instapaper)
- Highlight Loc. 989-92  | Added on Sunday, September 25, 2011, 08:11 AM

A source code element modifies the language in which it occurs.  Starting, say, with standard Java, one introduces a new class, and ends up with a different programming language — almost exactly like standard Java, but not quite because it now has this additional class in it.  That is abstraction, building a new language on top of an old one. Abstraction:  Transformation of one programming language into another by means of facilities available in the former language.
==========
Instapaper (Instapaper)
- Highlight Loc. 998-99  | Added on Sunday, September 25, 2011, 08:13 AM

An abstractively powerful programming language is, by my reckoning, a language from which one can abstract to a wide variety of other languages. 
==========
Instapaper (Instapaper)
- Highlight Loc. 1004-9  | Added on Sunday, September 25, 2011, 08:26 AM

The idea that semantic results are languages is a very powerful one.  The results of computations (and any other embellishment one wants) can be modeled by introducing additional sorts of terms that may occur in languages; the significance of each language is then fully represented by the possible sequences of terms that can follow from it.  But then, one doesn’t really need the explicit semantics at all.  Only the sequences of terms matter, and one can define a programming language by a set of sequences of terms.  At that point, one could say that all semantics is being represented as syntax (which is a truism about semantics, anyway), or one could just as well say that semantics has vanished entirely to be replaced with pure syntax.
==========
Instapaper (Instapaper)
- Highlight Loc. 1009-11  | Added on Sunday, September 25, 2011, 08:27 AM

Lisp has been described as a language with no syntax.  There is a sense in which that’s true:  if by “syntax” one means “syntax for representing programs rather than data”. 
==========
Instapaper (Instapaper)
- Highlight Loc. 1399-1401  | Added on Sunday, September 25, 2011, 08:41 AM

I posted a message on the Arc forum showing how to define a defmac macro that has the simplicity of syntax-rules with the added convenience of specifying keywords and captured names.
==========
Instapaper (Instapaper)
- Highlight Loc. 31-34  | Added on Sunday, September 25, 2011, 10:11 AM

In abstract, forking means cloning the entire processes. In practice, though, the operating system has a nifty feature called “copy on write” (CoW). Which says the two processes can share most all of the memory that hasn’t been written to since the fork. As soon as one or the other processes writes to the memory (usually a CPU “page” = 4k), it is copied over into the new processes.
==========
Instapaper (Instapaper)
- Highlight Loc. 35-38  | Added on Sunday, September 25, 2011, 10:12 AM

in Ruby it’s not so great. Ruby’s garbage collector (1.9.x) writes to every object every time it runs. This means that the first time either processes triggers garbage collection, the entire processes must be copied. In other words, Ruby loses all benefits of CoW. If you are writing a large application that uses a lot of memory, forking only makes sense for very long-running processes because the overhead of forking is very high.
==========
Instapaper (Instapaper)
- Highlight Loc. 57-60  | Added on Sunday, September 25, 2011, 10:15 AM

They are basically threads, except they actually share just one OS thread and they only multitask when you tell them to. This makes thread-saftey trivial, much like eventing, PLUS you can still write your code in a linear fashion. A mix of eventing and fibers basically gets you all the simplicity of ignoring thread-safety with little of the conceptual or code overhead of pure eventing.
==========
Instapaper (Instapaper)
- Highlight Loc. 102-3  | Added on Sunday, September 25, 2011, 10:19 AM

In short, we’re talking about MVC when a model can notify (through the Observer pattern) the views about the changes. It’s not possible in a classical Rails app (it’s possible when you use WebSockets, Pusher or a similar technology,
==========
Instapaper (Instapaper)
- Highlight Loc. 891-98  | Added on Sunday, September 25, 2011, 11:27 PM

We should be doing more of this. A lot more of this. I’m talking about fork(2), execve(2), pipe(2), socketpair(2), select(2), kill(2), sigaction(2), and so on and so forth. These are our friends. They want so badly just to help us.
==========
Instapaper (Instapaper)
- Highlight Loc. 902  | Added on Sunday, September 25, 2011, 11:28 PM

only the Perl people seem to regularly (and happily) apply common Unix idioms to a wide range of problem areas.
==========
Instapaper (Instapaper)
- Highlight Loc. 905-11  | Added on Sunday, September 25, 2011, 11:28 PM

Documentation is likely part of the problem. Here’s a small sample of Ruby core docs on an assortment of Unix system calls — the kind we don’t use enough: Process::fork – oh, sorry, see Kernel::fork … pitiful. Kernel::exec – really? Process::kill – thanks! IO::pipe – not bad. Socket::socketpair – entirely
==========
Instapaper (Instapaper)
- Highlight Loc. 964-65  | Added on Sunday, September 25, 2011, 11:31 PM

general IPC-based balanced multiprocessing.
==========
Instapaper (Instapaper)
- Highlight Loc. 113-14  | Added on Thursday, September 29, 2011, 04:35 PM

That is, our existing words of black box abstraction — the existing words we use for designing our systems — aren’t driving us toward the kinds of solutions we want, they are actually standing in the way of the kinds of solutions we want.
==========
Instapaper (Instapaper)
- Highlight Loc. 275-76  | Added on Thursday, September 29, 2011, 10:57 PM

we have to let clients control mapping decisions.
==========
Instapaper (Instapaper)
- Highlight Loc. 376-77  | Added on Thursday, September 29, 2011, 11:22 PM

some of the work in Smalltalk and then some of the work in SELF which basically says look, I can do very very late code generation.
==========
Instapaper (Instapaper)
- Highlight Loc. 411-12  | Added on Thursday, September 29, 2011, 11:26 PM

problem that objects have is that they are too brittle, they carve the world up too sharply.
==========
Instapaper (Instapaper)
- Highlight Loc. 421-22  | Added on Thursday, September 29, 2011, 11:27 PM

If clients get a system that has an inappropriate mapping decisions for them, one way or another, they are going to find a way around that problem.
==========
Instapaper (Instapaper)
- Highlight Loc. 457-58  | Added on Thursday, September 29, 2011, 11:31 PM

we as engineers of software have that the other engineers haven’t had. We have abstract descriptions that automatically run.
==========
Instapaper (Instapaper)
- Highlight Loc. 1020-22  | Added on Thursday, September 29, 2011, 11:42 PM

Modern computing environments tend to favor form over function: the primary objective in their design is ease of use for non-experts. Unix is a naked celebration of function over form.
==========
Instapaper (Instapaper)
- Highlight Loc. 1023-24  | Added on Thursday, September 29, 2011, 11:42 PM

In Unix, a word is worth a thousand mouse clicks.
==========
Instapaper (Instapaper)
- Highlight Loc. 1130-31  | Added on Thursday, September 29, 2011, 11:46 PM

Despite a resurgence of functional programming in the past few years, it remains a technology more talked about than used.
==========
Instapaper (Instapaper)
- Highlight Loc. 1200-1205  | Added on Thursday, September 29, 2011, 11:53 PM

Algebraic datatypes are what you get when you have a system that includes two ways of building up new types: products and sums. A product type is the more familiar of the two. Tuples, records, structs, and objects are all examples of product types. A product type combines multiple values of different types into a single value. These are called product types because they correspond mathematically to Cartesian products of the constituent types. A sum type corresponds to a disjoint union of the constituent types, and it is used to express multiple possibilities. Where product types are used when you have multiple things at the same time (a and b and c), sum types are used when you want to enumerate different possibilities (a or b or c).
==========
Instapaper (Instapaper)
- Highlight Loc. 1301-2  | Added on Thursday, September 29, 2011, 11:58 PM

The example uses algebraic datatypes to encode invariants, but OCaml has other tools for doing the same. OCaml’s module system is one example, allowing you to specify invariants in the interface of a module.
==========
Instapaper (Instapaper)
- Highlight Loc. 1404-7  | Added on Friday, September 30, 2011, 12:01 AM

funny–everyone knows that JavaScript’s event-loop concurrency model means that you don’t have the problems of threads with shared memory, locks, deadlocks, data races, etc that you have in languages like C or Java. Except that’s not right. JavaScript’s concurrency model is cooperative, which means that you don’t get descheduled if you don’t want to be, but everything else about shared memory concurrency is still there. As
==========
Instapaper (Instapaper)
- Highlight Loc. 421-22  | Added on Saturday, October 01, 2011, 07:34 PM

It’s not possible even to compute the free variables of a term in $vau-calculus in general.1 This makes compilation, automatic refactoring, and cross-referencing impossible in general.
==========
Instapaper (Instapaper)
- Highlight Loc. 432-34  | Added on Saturday, October 01, 2011, 07:36 PM

To show concretely why this is a problem, the call (foldr $and #t some-list) will either be a short-circuiting “and” or not, depending on an implementation detail of the foldr function!
==========
Instapaper (Instapaper)
- Highlight Loc. 325  | Added on Wednesday, October 05, 2011, 07:07 AM

GOLOG family of programming languages,
==========
Instapaper (Instapaper)
- Highlight Loc. 1292-94  | Added on Sunday, October 09, 2011, 09:36 AM

Filaments [7] and NT’s Fibers are good examples of cooperative user-level threads packages, although neither is targeted at large numbers of blocking threads.
==========
Instapaper (Instapaper)
- Highlight Loc. 1644-45  | Added on Sunday, October 09, 2011, 09:47 AM

 We owe it to the losers in these little skirmishes to make sure that, if nothing else, the good ideas are not lost along with the framework.
==========
Instapaper (Instapaper)
- Highlight Loc. 1641-43  | Added on Sunday, October 09, 2011, 09:59 AM

Common Lisp beat out Interlisp, and maybe for good reasons but it doesn't mean Interlisp had nothing to offer--some very good ideas got lost in the shuffle and I don't pretend that Common Lisp just obviously had a better way.
==========
Instapaper (Instapaper)
- Highlight Loc. 1681-82  | Added on Sunday, October 09, 2011, 10:02 AM

And that's my overall point.  It's not just about what's missing. It's about the lack of interest in those who have created Emacs in supporting those other things.
==========
Instapaper (Instapaper)
- Highlight Loc. 1887  | Added on Sunday, October 09, 2011, 10:19 AM

Agile is communication, trust and accountability. And that’s it. The rest is bullshit.
==========
Instapaper (Instapaper)
- Highlight Loc. 1908-11  | Added on Sunday, October 09, 2011, 10:21 AM

realization that the B+-tree, a variation in which all keys reside in the leaves, and the internal nodes are purely redundant search structures, had substantial benefits compared to the original version; every practical BTree that I have ever studied has been a B+-tree. All of this work was collected and described by Doug Comer of Purdue University in the paper The ubiquitous B-tree in 1979.
==========
Instapaper (Instapaper)
- Highlight Loc. 1921-23  | Added on Sunday, October 09, 2011, 10:22 AM

A very thorough and complete treatment of this Second Age of BTrees can be found in Jim Gray and Andreas Reuter’s encyclopedic Transaction Processing: Concepts and Techniques.
==========
Instapaper (Instapaper)
- Highlight Loc. 1935-36  | Added on Sunday, October 09, 2011, 10:23 AM

An excellent description of the concepts in most Third Age BTrees can be found in Ohad Rodeh’s B-trees, Shadowing, and Clones.
==========
Instapaper (Instapaper)
- Highlight Loc. 19-20  | Added on Monday, October 10, 2011, 08:42 AM

The greater the probability a random string is a valid program, the harder it is to report errors well.
==========
Instapaper (Instapaper)
- Highlight Loc. 1682-84  | Added on Wednesday, October 12, 2011, 07:05 PM

in 2008 Ola Bini blogged about instance_eval and effectively recommended to stay away from it unless you know what you are doing.
==========
Instapaper (Instapaper)
- Highlight Loc. 1708-11  | Added on Wednesday, October 12, 2011, 07:13 PM

the routing defintion block it would not be able to call the routing helpers. Contrast this with the old API which is not only more concise but also much easier to compose by merely passing around data structures or wrapping the map proxy object. So what’s the point? Isn’t this just bad library design? I’m not sure it’s just that when even venerable frameworks like Rails are affected by such blunders.
==========
Instapaper (Instapaper)
- Highlight Loc. 190  | Added on Saturday, October 15, 2011, 08:18 AM

A piece of data is an indivisible unit that you hold to be true for no other reason than it exists.
==========
Instapaper (Instapaper)
- Highlight Loc. 197-99  | Added on Saturday, October 15, 2011, 08:20 AM

there are only two main operations you can do with data: read existing data and add more data. CRUD has become CR.
==========
p59-costanza-1 (Pascal Costanza, Charlotte Herzeel, Theo D'Hondt)
- Highlight Page 1  | Added on Sunday, October 16, 2011, 07:59 AM

codeusingthemmaysufferfromdeadlocksanddoesnoteasily compose.Softwaretransactionalmemory(STM)[20]proposesthe useofatransactionalmodeltoalleviatemanyoftheseproblems, Permissiontomakedigitalorhardcopiesofallorpartofthisworkforpersonalor classroomuseisgrantedwithoutfeeprovidedthatcopiesarenotmadeordistributed forprofitorcommercialadvantageandthatcopiesbearthisnoticeandthefullcitation onthefirstpage.Tocopyotherwise,torepublish,topostonserversortoredistribute tolists,requirespriorspecificpermissionand/orafee. DLS’09,October26,2009,Orlando,Florida,USA. Copyrightc2009ACM978-1-60558-769-1/09/10...$10.00 byprovidingawell-definedprotocolforautomaticallycoordinating readsandwritestoshareddata. Theessentialideaisthatsoftwaretransactionsinherittheatomicityandisolationpropertiesfromdatabasetransactions.Atomicity requiresatransactionalpieceofcodetoexecutecompletelyor,in caseoffailure,torollbackanysideeffectsinordertogivetheillusionofnothavingbeenexecutedatall.Isolationrequirestheresult ofexecutingatransactionnottoinfluencetheresultofotherconcurrentlyexecutingtransactions.Acorrectimplementationofthese propertiesassuresthattransactionsavoiddataraces. Bothlibrary-basedandlanguage-basedrealizationsofSTMexist.STMlibraries[8,9,16]provideAPIsforopeningandclosing transactions,whilelanguagesupportforSTM[6,19]typicallyextendsalanguagewithakeywordatomicforenclosingcode,and theunderlyingSTMimplementationthenensuresthatsuchatomic blocksareexecutedtransactionally.Forexample,ifLisphadan atomicoperator,athread-safeimplementationoftheinsertoperationforadouble-linkedlistcouldlooklikeasfollows. (defuninsert(nodenew-node) (atomic(set-previousnew-nodenode) (set-nextnew-node(nextnode)) (if(not(null(nextnode))) (set-previous(nextnode)new-node)) (set-nextnodenew-node))) However,STMintroducesalargeruntimeoverheadduetothe needtomonitorreadandwriteaccessestosharedtransactional memory.Numerousstrategiestobalancethatoverheadhavebeen proposed,basedonpessimisticvs.optimisticconcurrencycontrol, earlyvs.lateconflictdetection,directvs.deferrredmemoryup
==========
p157-landin (P. J. Landin)
- Highlight Page 10  | Added on Sunday, October 16, 2011, 09:21 AM

Strachey: One inconvenient thing about a purely imperative language is that you have to specify far too much sequencing. For example, if you wish to do a matrix multiplication, you have to do n a multiplications. If you write an ordinary program to do this, you have to specify the exact sequence which they are all to be done
==========
ArchitectureOfLeanProlog 
- Highlight Page 3  | Added on Sunday, October 16, 2011, 03:29 PM

LeanProlog’sJava-basedpredecessor,Jinnihasbeenmainlyusedinvarious applications
==========
ArchitectureOfLeanProlog 
- Highlight Page 4  | Added on Sunday, October 16, 2011, 03:30 PM

LogicEnginesasAnswerGenerators
==========
ArchitectureOfLeanProlog 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 03:32 PM

CoroutininghasbeeninuseinPrologsystemsmostlytoimplementconstraint programmingextensions.Thetypicalmechanisminvolvesattributedvariables holdingsuspendedgoalsthatmaybetriggeredbychangesintheinstantiation stateofthevariables
==========
ArchitectureOfLeanProlog 
- Highlight Page 16  | Added on Sunday, October 16, 2011, 03:35 PM

WedescribeindetailLeanProlog’scompilationtechniquewhichreplacesthe WAMwithasimplifiedcontinuationpassingruntimesystem
==========
ArchitectureOfLeanProlog 
- Highlight Page 16  | Added on Sunday, October 16, 2011, 03:35 PM

(the“BinWAM”), basedonamappingoffullPrologtobinarylogicprograms,andafromofterm compressionusinga“tag-on-data”representationmechanism
==========
ArchitectureOfLeanProlog 
- Highlight Page 45  | Added on Sunday, October 16, 2011, 03:45 PM

11.Liskov,B.,Atkinson,R.R.,Bloom,T.,Moss,J.E.B.,Schaffert,C.,Scheifler,R., Snyder,A.:CLUReferenceManual.Volume114ofLectureNotesinComputer Science.Springer(1981)
==========
ArchitectureOfLeanProlog 
- Highlight Page 45  | Added on Sunday, October 16, 2011, 03:45 PM

20.Hermenegildo,M.V.:Anabstractmachineforrestrictedand-parallelexecution oflogicprograms.In:ProceedingsonThirdinternationalconferenceonlogic programming,NewYork,NY,USA,Springer-VerlagNewYork,Inc.(1986)25–39
==========
ArchitectureOfLeanProlog 
- Highlight Page 46  | Added on Sunday, October 16, 2011, 03:46 PM

30.Carro,M.,Hermenegildo,M.V.:Concurrencyinprologusingthreadsandashared database.In:ICLP.(1999)320–334
==========
ArchitectureOfLeanProlog 
- Highlight Page 46  | Added on Sunday, October 16, 2011, 03:47 PM

33.Tarau,P.:ASimplifiedAbstractMachinefortheExecutionofBinaryMetaprograms.In:ProceedingsoftheLogicProgrammingConference’91,ICOT,Tokyo(7 1991)119–128
==========
ArchitectureOfLeanProlog 
- Highlight Page 46  | Added on Sunday, October 16, 2011, 03:48 PM

38.Demoen,B.,Mari¨en,A.:ImplementationofPrologasbinarydefinitePrograms.In Voronkov,A.,ed.:LogicProgramming,RCLPProceedings.Number592inLecture NotesinArtificialIntelligence,Berlin,Heidelberg,Springer-Verlag(1992)165–176 39.Warren,D.H.D.:AnAbstractPrologInstructionSet.TechnicalNote309,SRI International(October1983)
==========
ArchitectureOfLeanProlog 
- Highlight Page 47  | Added on Sunday, October 16, 2011, 03:48 PM

40.Demoen,B.:Onthetransformationofaprologprogramtoamoreefficientbinary program.In:LOPSTR.(1992)242–252
==========
ArchitectureOfLeanProlog 
- Highlight Page 47  | Added on Sunday, October 16, 2011, 03:49 PM

41.Neumerkel,U.:SpecializationofPrologProgramswithPartiallyStaticGoalsand Binarization.Phdthesis(1992)TechnischeUniversit¨atWien. 42.Demoen,B.,Engels,G.,Tarau,P.:SegmentPreservingCopyingGarbageCollectionforWAMbasedProlog.In:Proceedingsofthe1996ACMSymposiumon AppliedComputing,Philadelphia,ACMPress(February1996)380–386 43.Tarau,P.,Neumerkel,U.:CompactRepresentationofTermsandInstructionsin theBinWAM.TechnicalReport93-3,Dept.d’Informatique,Universit´edeMoncton (November1993)availablebyftpfromclement.info.umoncton.ca. 44.Tarau,P.,Demoen,B.,DeBosschere,K.:ThePowerofPartialTranslation: anExperimentwiththeC-ificationofBinaryProlog.InGeorge,K.,Carrol,J., Deaton,E.,Oppenheim,D.,Hightower,J.,eds.:Proceedingsofthe1995ACM SymposiumonAppliedComputing,Nashville,ACMPress(February1995)152176
==========
ArchitectureOfLeanProlog 
- Highlight Page 47  | Added on Sunday, October 16, 2011, 03:49 PM

48.A¨ıt-Kaci,H.:Warren’sAbstractMachine:ATutorialReconstruction.MITPress (1991)
==========
ArchitectureOfLeanProlog 
- Highlight Page 47  | Added on Sunday, October 16, 2011, 03:50 PM

49.Zhou,N.F.,Takagi,T.,Ushijima,K.:Amatchingtreeorientedabstractmachine forprolog.(1990)159–173 50.Zhou,N.F.:Aregister-freeabstractprologmachinewithjumboinstructions.In Dahl,V.,Niemel¨a,I.,eds.:ICLP.Volume4670ofLectureNotesinComputer Science
==========
ArchitectureOfLeanProlog 
- Highlight Page 47  | Added on Sunday, October 16, 2011, 03:50 PM

56.Demoen,B.,Nguyen,P.L.:Somanywamvariations,solittletime.In:CL’00:ProceedingsoftheFirstInternationalConferenceonComputationalLogic,London, UK,Springer-Verlag(2000)1240–1254
==========
TR93-01c 
- Highlight Page 2  | Added on Sunday, October 16, 2011, 04:08 PM

ACMTransactionsonPro grammingLanguagesandSystemsabbreviatedTOPLAS
==========
TR93-01c 
- Highlight Page 3  | Added on Sunday, October 16, 2011, 04:09 PM

LandinsSECDmachineisdenedinhispaperTheMechanicalEvaluationofExpressionsLan alsoHendersonsbookHen
==========
TR93-01c 
- Highlight Page 4  | Added on Sunday, October 16, 2011, 05:02 PM

HoareandWirths axiomaticdenitionofPascalHW
==========
TR93-01c 
- Highlight Page 5  | Added on Sunday, October 16, 2011, 05:39 PM

MilnerspaperATheoryofTypePolymorphisminProgrammingMil
==========
TR93-01c 
- Highlight Page 5  | Added on Sunday, October 16, 2011, 05:42 PM

CLUisalanguagedesignedarounddataabstractionLSAS controlabstractionandexceptionhandlingmechanismsLS
==========
TR93-01c 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 05:54 PM

JohnBackusoneofthedesignersofFortranproposedanewlanguageforfunctionalprogramming withoutanynamescalledFPinhisTuringAwardLectureBaca
==========
TR93-01c 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 05:55 PM

MirandaTuraarelazyMirandaalsohasaninteresting notionofdataabstraction
==========
TR93-01c 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 05:56 PM

KowalskispaperAlgorithmLogicControlisagoodintroductiontologicprogramminginanidealized settingKow
==========
TR93-01c 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 05:56 PM

ThePrologPhenomenonMcD
==========
TR93-01c 
- Highlight Page 6  | Added on Sunday, October 16, 2011, 05:57 PM

eyisApt Several
==========
TR93-01c 
- Highlight Page 7  | Added on Sunday, October 16, 2011, 05:58 PM

Constraintbasedlanguageswillprobablybeimportantinthefuture
==========
TR93-01c 
- Highlight Page 11  | Added on Sunday, October 16, 2011, 06:03 PM

AckAdaAdaAGAghAlaALbAllAmeAndaAndbANS MartnAbadiBabyModulaandaTheoryofObjectsJournalofFunctionalProgramming April RobertoMAmadioandLucaCardelliSubtypingRecursiveTypesACMTransactionson ProgrammingLanguagesandSystems September MartnAbadiandLucaCardelliATheoryofPrimitiveObjects UntypedandFirstOrder SystemsInMasamiHagiyaandJohnCMitchelleditorsTheoreticalAspectsofComputer Softwarevolume April ofLectureNotesinComputerSciencepages SpringerVerlag MartnAbadiandLucaCardelliOnSubtypingandMatchingInWalterOlthoeditor ECOOP ber ObjectOrientedProgrammingthEuropeanConferenceAarhusDenmarknum inLectureNotesinComputerSciencepages SpringerVerlagNewYorkNY MartnAbadiandLucaCardelliATheoryofObjectsMonographsinComputerScience SpringerVerlagNewYorkNY WBAckermanDataFlowLanguagesComputer February
==========
TR93-01c 
- Highlight Page 12  | Added on Sunday, October 16, 2011, 06:06 PM

HenryGBakerLivelyLinearLisp August
==========
TR93-01c 
- Highlight Page 13  | Added on Sunday, October 16, 2011, 06:06 PM

GiladBrachaandWilliamCookMixinBasedInheritanceACMSIGPLANNotices OctoberBC OOPSLAECOOPProceedingsNMeyrowitz
==========
TR93-01c 
- Highlight Page 15  | Added on Sunday, October 16, 2011, 06:10 PM

GiuseppeCastagnaCovarianceandcontravarianceconictwithoutacauseACMTransac tionsonProgrammingLanguagesandSystems
==========
TR93-01c 
- Highlight Page 18  | Added on Sunday, October 16, 2011, 06:13 PM

RichardPGabrielTheendofhistoryandthelastprogramminglanguageJournalofObject OrientedProgramming July
==========
TR93-01c 
- Highlight Page 19  | Added on Sunday, October 16, 2011, 06:14 PM

JosephAGoguenandJoseMeseguerUnifyingFunctionalObjectOrientedandRelational ProgrammingwithLogicalSemanticsInBruceShriverandPeterWegnereditorsResearch DirectionsinObjectOrientedProgrammingpages TheMITPressCambridgeMass NealGlewandGregMorrisettTypeSafeLinkingandModularAssemblyLanguageIn ConferenceRecordofPOPL ThethACMSIGPLANSIGACTSymposiumonPrinciples ofProgrammingLanguagesSanAntonioTexaspages ACM NewYorkNYJanuary MichaelJGordonRobinMilnerandChristopherPWadsworthEdinburghLCFvolume ofLectureNotesinComputerScienceSpringerVerlagNewYorkNY authorislistedonthecoverasArthurJMilnerwhichisclearlyamistake Thesecond JosephAGoguenParameterizedProgrammingIEEETransactionsonSoftwareEngineering SE September RGoldblattTopoiTheCategoricalAnalysisofLogicRevisedEditionvolume inLogicandtheFoundationsofMathematicsNorthHollandNewYorkNY ofStudies MichaelJCGordonTheDenotationalDescriptionofProgrammingLanguagesSpringer VerlagNewYorkNY MichaelJCGordonProgrammingLanguageTheoryanditsImplementationPrenticeHall InternationalSeriesinComputerSciencePrenticeHallIncNewYorkNY REGriswoldJFPoageandIPPolonskyTheSNOBOLProgrammingLanguagesecond edition PrenticeHallIncEnglewoodClisNJ AdeleGoldbergandDavidRobsonSmalltalk TheLanguageanditsImplementation AddisonWesleyPublishingCoReadingMass
==========
TR93-01c 
- Highlight Page 21  | Added on Sunday, October 16, 2011, 06:16 PM

CARHoareCommunicatingSequentialProcessesCommunicationsoftheACM August
==========
TR93-01c 
- Highlight Page 21  | Added on Sunday, October 16, 2011, 06:16 PM

DHHIngallsDesignPrinciplesBehindSmalltalkBYTEIve ACMOctober August
==========
TR93-01c 
- Highlight Page 22  | Added on Sunday, October 16, 2011, 08:52 PM

SamuelKaminInheritanceinSmalltalkvolume ACMAugust ADenotationalDenitionInConferenceRecord oftheFifteenthAnnualACMSymposiumonPrinciplesofProgrammingLanguagesSanDiego CalifpagesKam ACMJanuary
==========
TR93-01c 
- Highlight Page 23  | Added on Sunday, October 16, 2011, 08:54 PM

BarbaraLiskovRussellAtkinsonTobyBloomEliotMossJCraigSchaertRobertScheier andAlanSnyderCLUReferenceManualvolume SpringerVerlagNewYorkNY
==========
TR93-01c 
- Highlight Page 23  | Added on Sunday, October 16, 2011, 08:54 PM

PJLandinTheMechanicalEvaluationofExpressionsComputerJournal SeealsoLandinspaperALambdaCalculusApproachinAdvancesinProgrammingand NonNumericalComputationLFoxedPergamonPressOxford
==========
TR93-01c 
- Highlight Page 23  | Added on Sunday, October 16, 2011, 08:55 PM

GaryTLeavensIntroductiontotheLiteratureonObjectOrientedDesignProgramming andLanguagesOOPSMessengerLeab October
==========
TR93-01c 
- Highlight Page 23  | Added on Sunday, October 16, 2011, 08:55 PM

WmLelerConstraintProgrammingLanguagesTheirSpecicationandGenerationAddison WesleyPublishingCoReadingMass
==========
TR93-01c 
- Highlight Page 24  | Added on Sunday, October 16, 2011, 08:57 PM

LeslieLamportandFredBSchneiderTheHoareLogicofCSPandAllThatACM TransactionsonProgrammingLanguagesandSystems April
==========
TR93-01c 
- Highlight Page 24  | Added on Sunday, October 16, 2011, 08:58 PM

BarbaraHLiskovandAlanSnyderExceptionHandlinginCLUIEEETransactionson SoftwareEngineeringSE November
==========
TR93-01c 
- Highlight Page 25  | Added on Sunday, October 16, 2011, 08:58 PM

DavidMacQueenModulesforStandardMLInProceedingsoftheSymposiumonLISPand FunctionalProgrammingAustinTexaspagesMac IanMackieLilac ACMAugust
==========
TR93-01c 
- Highlight Page 25  | Added on Sunday, October 16, 2011, 08:59 PM

DrewMcDermottThePrologPhenomenonACMSIGARTNewsletterpages Number
==========
TR93-01c 
- Highlight Page 27  | Added on Sunday, October 16, 2011, 09:05 PM

DrewVMcDermottandGeraldJaySussmanTheCONNIVERReferenceManualAIMemoa MassachusettsInstituteofTechnologyArticialIntelligenceLaboratoryJanuary
==========
TR93-01c 
- Highlight Page 28  | Added on Sunday, October 16, 2011, 09:06 PM

AndreasPaepckeObjectOrientedProgrammingTheCLOSPerspectiveTheMITPressPauPCPDMPetPetPeyPfePfePGMPHLPiePitPloPot LaurenceCPaulsonMLfortheWorkingProgrammerCambridgeUniversityPressNew YorkNY YiannisEPapelisandThomasLCasavantSpecicationandAnalysisofParallelDistributed SoftwareandSystemsbyusingPetriNetswithTransitionEnablingFunctionsIEEETrans actionsonSoftwareEngineering March BenjaminPierceScottDietzenandSpiroMichaylovProgramminginHigherOrderTyped LambdaCalculiTechnicalReportCMUCS MellonUniversityMarch JLPetersonPetriNetsACMComputingSurveys SchoolofComputerScienceCarnegie September GeraldEPetersoneditorTutorialObjectOrientedComputingIEEEComputerSociety PressLosAngelesCalif Volumeconceptsvolumeimplementations SLPeytonJonesTheImplementationofFunctionalProgrammingLanguagesPrenticeHall EnglewoodClisNJ FrankPfenningLogicProgrammingintheLFLogicalFrameworkInGerardHuetandGordon PlotkineditorsLogicalFrameworkspages CambridgeUniversityPress FrankPfenningeditorTypesinLogicProgrammingLogicProgrammingSeriesTheMIT PressCambridgeMass SPrasadAGiacaloneandPMishraOperationalandalgebraicsemanticsofFacileA symmetricintegrationofconcurrentandfunctionalprogrammingInProceedingsoftheth InternationalColloquiumonAutomataLanguagesandProgrammingICALP ofLNCSpages SpringerVerlagJulyvolume GJPopekJJHorningBWLampsonJGMitchellandRLLondonNotesonthe DesignofEuclidACMSIGPLANNotices March ProceedingsofanACM ConferenceonLanguageDesignforReliableSoftwareRalieghNorthCarolinaMarch BenjaminCPierceBasicCategoryTheoryforComputerScientistsTheMITPressCam bridgeMass KentMPitmanTheRevisedMacLispManualTechnicalReportTR InstituteofTechnologyLaboratoryforComputerScienceMay Massachusetts GDPlotkinLCFConsideredasaProgrammingLanguageTheoreticalComputerScience FrancoisPottierAFrameworkforTypeInferencewithSubtypingInProceedingsoftheACM SIGPLANInternationalConferenceonFunctionalProgrammingICFP ACMSIGPLANNoticespagesvolume of ACMJune
==========
TR93-01c 
- Highlight Page 29  | Added on Sunday, October 16, 2011, 09:08 PM

DidierRemyandJeromeVouillonObjectiveMLAnEectiveObjectOrientedExtensionof MLTheory
==========
TR93-01c 
- Highlight Page 31  | Added on Sunday, October 16, 2011, 09:09 PM

GSussmanandGSteeleConstraintsaLanguageforExpressingAlmostHierarchicalDe scriptionsArticialIntelligence
==========
TR93-01c 
- Highlight Page 31  | Added on Sunday, October 16, 2011, 09:15 PM

EhudShapiroandDavidHDWarrenTheFifthGenerationProjectPersonalPerspectives CommunicationsoftheACM March
==========
TR93-01c 
- Highlight Page 31  | Added on Sunday, October 16, 2011, 09:15 PM

GeraldJaySussmanTerryWinogradandEugeneCharniakMicroPLANNERReference ManualAIMemoA
==========
TR93-01c 
- Highlight Page 33  | Added on Sunday, October 16, 2011, 09:16 PM

PhilipWadlerLazyVersusStrictACMComputingSurveys PhilipWadlerHowtodeclareanImperativeACMComputingSurveys
==========
TR93-01c 
- Highlight Page 33  | Added on Sunday, October 16, 2011, 09:17 PM

PhilipWadlerandStephenBlottHowtomakeadhocPolymorphismlessadhocInConference RecordoftheSixteenthAnnualACMSymposiumonPrinciplesofProgrammingLanguages
==========
TR93-01c 
- Highlight Page 34  | Added on Sunday, October 16, 2011, 09:18 PM

DanielWeinrebandDavidMoonFlavorsMessagePassingintheLispMachineAIMemo
==========
p179-pitman 
- Highlight Page 5  | Added on Monday, October 17, 2011, 07:47 AM

Perhaps the most important reason why MACRO's are important is that they offer transparency of flmctionalily. It is possible, without evalu- ating the macro form, to dctermin6 what the form will do in terms of primitive I.isp operations.
==========
book_american_v2d_typeset_preface chap1 
- Highlight Page 11  | Added on Wednesday, October 19, 2011, 11:05 PM


==========
book_american_v2d_typeset_preface chap1 
- Highlight Page 18  | Added on Wednesday, October 19, 2011, 11:21 PM


==========
Instapaper (Instapaper)
- Highlight Loc. 386  | Added on Saturday, October 22, 2011, 07:48 AM

Newton said, “If others would think as hard as I did, then they would get similar results.”
==========
Instapaper (Instapaper)
- Highlight Loc. 405-6  | Added on Saturday, October 22, 2011, 07:51 AM

One success brought him confidence and courage. One of the characteristics of successful scientists is having courage.
==========
Instapaper (Instapaper)
- Highlight Loc. 490  | Added on Saturday, October 22, 2011, 08:04 AM

If you do not work on an important problem, it’s unlikely you’ll do important work.
==========
Instapaper (Instapaper)
- Highlight Loc. 545-46  | Added on Sunday, October 23, 2011, 07:57 AM

“If I have seen further than others, it is because I’ve stood on the shoulders of giants.” These days we stand on each other’s feet!
==========
Instapaper (Instapaper)
- Highlight Loc. 613-15  | Added on Sunday, October 23, 2011, 08:01 AM

doing really first-class work, and knowing it, is as good as wine, women and song put together,” or if it’s a woman she says, “It is as good as wine, men and song put together.” And if you look at the bosses, they tend to come back or ask for reports, trying to participate in those moments of discovery. They’re always in the way.
==========
Instapaper (Instapaper)
- Highlight Loc. 618-19  | Added on Sunday, October 23, 2011, 08:02 AM

The struggle to make something of yourself seems to be worthwhile in itself.
==========
Instapaper (Instapaper)
- Highlight Loc. 638-39  | Added on Sunday, October 23, 2011, 08:05 AM

You find this happening again and again; good scientists will fight the system rather than learn to work with the system and take advantage of all the system has to offer.
==========
Instapaper (Instapaper)
- Highlight Loc. 651  | Added on Sunday, October 23, 2011, 08:07 AM

You should dress according to the expectations of the audience spoken to.
==========
Instapaper (Instapaper)
- Highlight Loc. 1912-13  | Added on Sunday, October 23, 2011, 09:54 AM

A ‘crutch’ in language design is a solution to a problem of accidental complexity.
==========
10.1.1.71.8493 
- Highlight Page 1  | Added on Thursday, October 27, 2011, 05:46 PM

℄
==========
Macros-talk 
- Highlight Page 9  | Added on Thursday, October 27, 2011, 06:24 PM

Onesometimeshearsthathigher-orderfunctions(and relatednon-strictness)makemacrosunnecessary.For example,InHaskell,ifisaregularfunction.However, everylanguagewithmoresyntaxthanlambda-calculus hasphrasesthatarenotexpressions.Examplesofsuch second-classformsare:type,module,fixityandother declarations;bindingforms;statements.Onlymacros canexpandintoasecond-classobject.Theresultofa functionislimitedtoanexpressionoravalue.
==========
Instapaper (Instapaper)
- Highlight Loc. 1773-75  | Added on Thursday, November 03, 2011, 09:21 PM

What actually happens is that whenever we define a new class or module, its name is added as a constant that points to the actual class. Similarly, when we define a method at the top level it’s added as a private method to Object. That means that whenever we type in a name that looks like a constant (starts with a capital letter) without parenthesis, Ruby will search for that constant:
==========
mmm_excerpt 
- Highlight Page 8  | Added on Thursday, November 03, 2011, 09:33 PM

More software projects have gone awry for lack of calendar time than for all other causes combined.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 52  | Added on Saturday, November 05, 2011, 09:04 AM

I will contend that conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Bookmark Page 52  | Added on Saturday, November 05, 2011, 09:05 AM


==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Note Page 52  | Added on Saturday, November 05, 2011, 09:07 AM

There is a book on oss projects in here... Clojure evolution and the pressures of community.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 54  | Added on Saturday, November 05, 2011, 09:09 AM

Mooers's TRAC language and Algol 68 achieve simplicity as measured by the number of distinct elementary concepts. They are not, however, straightforward.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 54  | Added on Saturday, November 05, 2011, 09:11 AM

Simplicity and straightforwardness proceed from conceptual integrity. Every part must reflect the same philosophies and the same balancing of desiderata. Every part must even use the same techniques in syntax and analogous notions in semantics. Ease of use, then, dictates unity of design, conceptual integrity.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 57  | Added on Saturday, November 05, 2011, 09:20 AM

The worst buildings are those whose budget was too great for the purposes to be served. Bach's creative output hardly seems to have been squelched by the necessity of producing a limited-form cantata each week.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Note Page 57  | Added on Saturday, November 05, 2011, 09:20 AM

take pride in your work. beauty can be found in language design and rails apps alike.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 72  | Added on Saturday, November 05, 2011, 01:11 PM

The manual, or written specification, is a necessary tool, though not a sufficient one.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Note Page 72  | Added on Saturday, November 05, 2011, 01:11 PM

like tests
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 74  | Added on Saturday, November 05, 2011, 01:18 PM

Iverson's APL has been used to describe machines, most notably the IBM 70904 and System/360.5
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 111  | Added on Sunday, November 06, 2011, 07:19 AM

Representation Is the Essence of Programming
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 156  | Added on Sunday, November 06, 2011, 08:17 AM

When one hears of disastrous schedule slippage in a project, he imagines that a series of major calamities must have befallen it. Usually, however, the disaster is due to termites, not tornadoes; and the schedule has slipped imperceptibly but inexorably.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 192  | Added on Sunday, November 06, 2011, 08:10 AM

An expert system is a program containing a generalized inference engine and a rule base, designed to take input data and assumptions and explore the logical consequences through the inferences derivable from the rule base, yielding conclusions and advice, and offering to explain its results by retracing its reasoning for the user. The inference engines typically can deal with fuzzy or probabilistic data and rules in addition to purely deterministic logic.
==========
Brooks_-_The_Mythical_Man-Month_-_Essays_on_Software_Engineering__Anniversary_Edition (Danny)
- Highlight Page 196  | Added on Sunday, November 06, 2011, 08:17 AM

More seriously, even perfect program verification can only establish that a program meets its specification. The hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification.
==========
Instapaper (Instapaper)
- Highlight Loc. 284-85  | Added on Sunday, November 13, 2011, 06:56 AM

Once enjoyment becomes permitted it slides imperceptibly toward the obligatory.
==========
Instapaper (Instapaper)
- Highlight Loc. 283-84  | Added on Sunday, November 13, 2011, 06:56 AM

“My psychoanalytical friends are always telling me that we once needed classical therapy to free us from internalised repression so we could do it. But today you feel guilty if you do not have wide-ranging sexual desire and experience.
==========
Instapaper (Instapaper)
- Highlight Loc. 295  | Added on Sunday, November 13, 2011, 06:58 AM

Suspicious of simplicity,
==========
Instapaper (Instapaper)
- Highlight Loc. 488-89  | Added on Sunday, November 13, 2011, 07:18 AM

Mather is the lead author of Octopus: The Ocean’s Intelligent Invertebrate,
==========
Instapaper (Instapaper)
- Highlight Loc. 412-13  | Added on Tuesday, November 15, 2011, 07:30 PM

Vyssotsky, Victor A. Darwin: A Game of Survival and (Hopefully) Evolution. New Jersey: Bell Telephone Laboratories, 1961.
==========
Instapaper (Instapaper)
- Highlight Loc. 1752-53  | Added on Tuesday, November 15, 2011, 07:36 PM

Because macroexpansion is performed before compilation, the compiler receives only core language expressions with known semantics (LAMBDA, DEFINE, SET, IF, …).
==========
Instapaper (Instapaper)
- Highlight Loc. 24-26  | Added on Tuesday, November 15, 2011, 07:40 PM

Yet, over in the computer science department, we’re awash in types.  They’re certainly used for reasoning about programs (both practically and theoreticially) — but at some point our reasoning may become more about the types themselves than about the programs they apply to. 
==========
Instapaper (Instapaper)
- Highlight Loc. 1271-72  | Added on Wednesday, November 16, 2011, 11:20 PM

I’d love to see the GOF’s appropriation of Alexander critiqued, and maybe brought into contact with the concerns raised in Heidegger’s essay The Question Concerning Technology).
==========
Instapaper (Instapaper)
- Highlight Loc. 1295  | Added on Wednesday, November 16, 2011, 11:22 PM

Stanford Encyclopedia of Philosophy
==========
Instapaper (Instapaper)
- Highlight Loc. 1323-24  | Added on Wednesday, November 16, 2011, 11:22 PM

But mapping out the philosophical landscape of computer science is no easy task. Fortunately, traditional branches of philosophy can provide intellectual and structural guidance.
==========
Instapaper (Instapaper)
- Highlight Loc. 1816-17  | Added on Wednesday, November 16, 2011, 11:26 PM

“absence of evidence is evidence of absence”
==========
Instapaper (Instapaper)
- Highlight Loc. 1841  | Added on Wednesday, November 16, 2011, 11:29 PM

Free Inquiry magazine,
==========
Instapaper (Instapaper)
- Highlight Loc. 325-26  | Added on Thursday, November 17, 2011, 09:42 PM

I have discovered that there are two types of command interfaces in the world of computing: good interfaces and user interfaces.
==========
Instapaper (Instapaper)
- Highlight Loc. 326-27  | Added on Thursday, November 17, 2011, 09:43 PM

The essence of user interfaces is parsing: converting an unstructured sequence of commands, in a format usually determined more by psychology than by solid engineering, into structured data.
==========
Instapaper (Instapaper)
- Highlight Loc. 379-80  | Added on Thursday, November 17, 2011, 10:24 PM

In most mainstream languages, the data types found in the syntax tree are quite different from the data types you operate on at runtime.
==========
Instapaper (Instapaper)
- Highlight Loc. 410-11  | Added on Thursday, November 17, 2011, 11:11 PM

The locals vocabulary compiles lexical variable usage down to stack shuffling, and curry calls (for constructing quotations that close over a variable).
==========
Instapaper (Instapaper)
- Highlight Loc. 672-73  | Added on Thursday, November 17, 2011, 11:32 PM

The project ambjs is an implementation of AMB I wrote in Javascript using a trampoline. The source and the tests are explained using docco.
==========
Instapaper (Instapaper)
- Highlight Loc. 821-22  | Added on Thursday, November 17, 2011, 11:35 PM

each extra month with Haskell gave me an extra month of new perspective on what it means to compute from type classes to laziness to combinators to, yes, monads.
==========
Instapaper (Instapaper)
- Highlight Loc. 1116-18  | Added on Saturday, November 19, 2011, 08:25 AM

He’s all in favour of women, as long as they satisfy his own ideals of what a woman should be. This kind of attitude is typified by the skeptic-oriented webcomic xkcd. “I like nerdy girls”, says Randall Munroe — but can he tolerate any others?
==========
Instapaper (Instapaper)
- Highlight Loc. 1179-82  | Added on Saturday, November 19, 2011, 08:38 AM

one can regard events as having a purpose, or one can regard events as having a cause; these are very different metaphors, that lead to very different perceptions of reality. The existence of such metaphors is uncontroversial, by the way; this isn’t wishy-washy pomo stuff. Even Dawkins acknowledges them: he calls them memes.
==========
Instapaper (Instapaper)
- Highlight Loc. 1216-18  | Added on Saturday, November 19, 2011, 08:48 AM

old scientists, have greater stubbornness. Much more common is the scenario described by Max Planck: “A new scientific truth does not triumph by convincing its opponents and making them see the light, but rather because its opponents eventually die, and a new generation grows up that is familiar with it.”
==========
Instapaper (Instapaper)
- Note Loc. 1218  | Added on Saturday, November 19, 2011, 08:48 AM

programmimg oop fn etc.
==========
Instapaper (Instapaper)
- Highlight Loc. 1247-48  | Added on Saturday, November 19, 2011, 08:56 AM

can’t help but be suspicious of a field in which research is dominated by a handful of particularly large and unscrupulous corporations.
==========
Instapaper (Instapaper)
- Highlight Loc. 1250-51  | Added on Saturday, November 19, 2011, 08:57 AM

medical science has tended to pathologise those sets of symptoms which interfere with an individual’s participation in the profit system
==========
Instapaper (Instapaper)
- Highlight Loc. 1318-19  | Added on Saturday, November 19, 2011, 09:07 AM

Skeptics ask society’s castaways to leave a reality in which they are good and valued people, and enter one in which they are pieces of warm garbage. Little wonder that so few take up the offer.
==========
Instapaper (Instapaper)
- Highlight Loc. 1364-65  | Added on Saturday, November 19, 2011, 09:29 AM

when skeptics talk about subjects outside their domain of expertise, I’m struck by how irrelevant their comments are, and how ugly, shrill and trivial.
==========
Instapaper (Instapaper)
- Highlight Loc. 15-16  | Added on Tuesday, November 22, 2011, 09:37 PM

“Institutions will try to preserve the problem to which they are the solution.”
==========
Instapaper (Instapaper)
- Highlight Loc. 224  | Added on Thursday, November 24, 2011, 11:30 AM

54. Beware of the Turing tar-pit in which everything is possible but nothing of interest is easy.
==========
Instapaper (Instapaper)
- Highlight Loc. 224-25  | Added on Thursday, November 24, 2011, 11:32 AM

A LISP programmer knows the value of everything, but the cost of nothing.
==========
Instapaper (Instapaper)
- Highlight Loc. 226-27  | Added on Thursday, November 24, 2011, 11:33 AM

Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.
==========
Instapaper (Instapaper)
- Highlight Loc. 227-28  | Added on Thursday, November 24, 2011, 11:33 AM

In English every word can be verbed. Would that it were so in our programming languages.
==========
Instapaper (Instapaper)
- Highlight Loc. 232  | Added on Thursday, November 24, 2011, 05:35 PM

Making something variable is easy. Controlling duration of constancy is the trick.
==========
Instapaper (Instapaper)
- Highlight Loc. 238  | Added on Thursday, November 24, 2011, 05:37 PM

Documentation is like term insurance: It satisfies because almost no one who subscribes to it depends on its benefits.
==========
Instapaper (Instapaper)
- Highlight Loc. 1934-35  | Added on Thursday, November 24, 2011, 09:43 PM

Wiliam Goodell’s The American Slave Code in Theory and Practice
==========
Instapaper (Instapaper)
- Highlight Loc. 159-60  | Added on Thursday, December 01, 2011, 10:53 PM

In Python, if you want to compose a number of its generators into a coroutine, every procedure in the call stack must cooperate. In fact until recently this wasn’t even possible to implement efficiently.
==========
Instapaper (Instapaper)
- Highlight Loc. 168-69  | Added on Thursday, December 01, 2011, 10:54 PM

For more on delimited continuations, see the readable 1993 paper by Dorai Sitaram, Handling Control.
==========
Instapaper (Instapaper)
- Highlight Loc. 233-34  | Added on Thursday, December 01, 2011, 11:12 PM

See Kent Pitman’s Lambda, the Ultimate Political Party for
==========
Instapaper (Instapaper)
- Highlight Loc. 240-43  | Added on Thursday, December 01, 2011, 11:13 PM

We should also consider the costs of using hastily designed languages. JavaScript has some crazy bad stuff, like with, var hoisting, a poor numeric model, dynamic this scoping, lack of modularity regarding binding lookup (witness the recent spate of browser bugs regarding prototype lookup on user objects), the strange arguments object, and the lack of tail recursion. Then there are the useful features that JavaScript lacks, like macros, modules, and delimited continuations.
==========
Instapaper (Instapaper)
- Highlight Loc. 248-50  | Added on Thursday, December 01, 2011, 11:19 PM

The future of computing will not be the same as the present. So how will JavaScript adapt to these changes? We can’t tell right now, but given the difficulty in changing simple things like making 010 parse as 10 and not 8 indicates that at some point it will stagnate. But Scheme will still be with us, because its parts are well thought-out,
==========
Instapaper (Instapaper)
- Highlight Loc. 925-26  | Added on Saturday, December 03, 2011, 07:23 PM

Jean-Claude Izzo’s Total Chaos, the first of his Marseilles Trilogy,
==========
Instapaper (Instapaper)
- Highlight Loc. 970-72  | Added on Saturday, December 03, 2011, 07:51 PM

 When a generator suspends, it's exactly like a return today except we simply decline to decref the frame.  That's it!  The locals, and where we are in the computation, aren't thrown away.  A "resume" then consists of *re*starting the frame at its next bytecode instruction,
==========
Instapaper (Instapaper)
- Highlight Loc. 984-85  | Added on Saturday, December 03, 2011, 11:45 PM

Coroutines grew up in simulation languages because they're an achingly natural way to model independent objects that interact with feedback.
==========
Instapaper (Instapaper)
- Highlight Loc. 1019-22  | Added on Saturday, December 03, 2011, 11:52 PM

the semantics of goto turned out to be trivial:  at a branch point, you can go one of two ways.  Represent one of those ways by a function f that computes what happens if you branch one way, and the other way by a function g.  Then an if+goto simply picks one of f or g as "the continuation" of the program, depending on whether the "if" condition is true or false.  And a plain goto simply replaces the current continuation with a different one (representing what happens at the branch target) unconditionally.
==========
